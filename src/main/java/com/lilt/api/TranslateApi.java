/*
 * Lilt REST API
 * The Lilt REST API enables programmatic access to the full-range of Lilt backend services including:   * Training of and translating with interactive, adaptive machine translation   * Large-scale translation memory   * The Lexicon (a large-scale termbase)   * Programmatic control of the Lilt CAT environment   * Translation memory synchronization  Requests and responses are in JSON format. The REST API only responds to HTTPS / SSL requests. ## Authentication Requests are authenticated via REST API key, which requires the Business plan.  Requests are authenticated using [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication). Add your REST API key as both the `username` and `password`.  For development, you may also pass the REST API key via the `key` query parameter. This is less secure than HTTP Basic Auth, and is not recommended for production use. 
 *
 * The version of the OpenAPI document: v2.0
 * Contact: support@lilt.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.lilt.api;

import com.lilt.ApiCallback;
import com.lilt.ApiClient;
import com.lilt.ApiException;
import com.lilt.ApiResponse;
import com.lilt.Configuration;
import com.lilt.Pair;
import com.lilt.ProgressRequestBody;
import com.lilt.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.lilt.model.Error;
import com.lilt.model.TranslateRegisterResponse;
import com.lilt.model.TranslationList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TranslateApi {
    private ApiClient localVarApiClient;

    public TranslateApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TranslateApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for registerSegment
     * @param source A source string to be registered. (required)
     * @param srclang An ISO 639-1 language code. (required)
     * @param trglang An ISO 639-1 language code. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A status object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registerSegmentCall(String source, String srclang, String trglang, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/translate/register";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (source != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source", source));
        }

        if (srclang != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("srclang", srclang));
        }

        if (trglang != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trglang", trglang));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registerSegmentValidateBeforeCall(String source, String srclang, String trglang, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'source' is set
        if (source == null) {
            throw new ApiException("Missing the required parameter 'source' when calling registerSegment(Async)");
        }
        
        // verify the required parameter 'srclang' is set
        if (srclang == null) {
            throw new ApiException("Missing the required parameter 'srclang' when calling registerSegment(Async)");
        }
        
        // verify the required parameter 'trglang' is set
        if (trglang == null) {
            throw new ApiException("Missing the required parameter 'trglang' when calling registerSegment(Async)");
        }
        

        okhttp3.Call localVarCall = registerSegmentCall(source, srclang, trglang, _callback);
        return localVarCall;

    }

    /**
     * Register a segment
     * Register a source string for interactive translation. The &#x60;source_hash&#x60; value that is returned by this request is required by the &#x60;prefix&#x60; parameter for the translation endpoint. The maximum source length is 5,000 characters. Usage charges apply to this endpoint for production REST API keys.  
     * @param source A source string to be registered. (required)
     * @param srclang An ISO 639-1 language code. (required)
     * @param trglang An ISO 639-1 language code. (required)
     * @return TranslateRegisterResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A status object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public TranslateRegisterResponse registerSegment(String source, String srclang, String trglang) throws ApiException {
        ApiResponse<TranslateRegisterResponse> localVarResp = registerSegmentWithHttpInfo(source, srclang, trglang);
        return localVarResp.getData();
    }

    /**
     * Register a segment
     * Register a source string for interactive translation. The &#x60;source_hash&#x60; value that is returned by this request is required by the &#x60;prefix&#x60; parameter for the translation endpoint. The maximum source length is 5,000 characters. Usage charges apply to this endpoint for production REST API keys.  
     * @param source A source string to be registered. (required)
     * @param srclang An ISO 639-1 language code. (required)
     * @param trglang An ISO 639-1 language code. (required)
     * @return ApiResponse&lt;TranslateRegisterResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A status object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TranslateRegisterResponse> registerSegmentWithHttpInfo(String source, String srclang, String trglang) throws ApiException {
        okhttp3.Call localVarCall = registerSegmentValidateBeforeCall(source, srclang, trglang, null);
        Type localVarReturnType = new TypeToken<TranslateRegisterResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Register a segment (asynchronously)
     * Register a source string for interactive translation. The &#x60;source_hash&#x60; value that is returned by this request is required by the &#x60;prefix&#x60; parameter for the translation endpoint. The maximum source length is 5,000 characters. Usage charges apply to this endpoint for production REST API keys.  
     * @param source A source string to be registered. (required)
     * @param srclang An ISO 639-1 language code. (required)
     * @param trglang An ISO 639-1 language code. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A status object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registerSegmentAsync(String source, String srclang, String trglang, final ApiCallback<TranslateRegisterResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = registerSegmentValidateBeforeCall(source, srclang, trglang, _callback);
        Type localVarReturnType = new TypeToken<TranslateRegisterResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for translateSegment
     * @param memoryId A unique Memory identifier. (required)
     * @param source The source text to be translated. (optional)
     * @param sourceHash A source hash code. (optional)
     * @param prefix A target prefix. (optional)
     * @param n Return top n translations. (optional, default to 1)
     * @param rich Returns rich translation information (e.g., with word alignments). (optional, default to false)
     * @param tmMatches Include translation memory fuzzy matches. (optional, default to true)
     * @param projectTags Project tags. Projects tags in source to target if set to true. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A TranslationList object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call translateSegmentCall(Integer memoryId, String source, Integer sourceHash, String prefix, Integer n, Boolean rich, Boolean tmMatches, Boolean projectTags, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/translate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (memoryId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("memory_id", memoryId));
        }

        if (source != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source", source));
        }

        if (sourceHash != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source_hash", sourceHash));
        }

        if (prefix != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prefix", prefix));
        }

        if (n != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("n", n));
        }

        if (rich != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rich", rich));
        }

        if (tmMatches != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tm_matches", tmMatches));
        }

        if (projectTags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("project_tags", projectTags));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call translateSegmentValidateBeforeCall(Integer memoryId, String source, Integer sourceHash, String prefix, Integer n, Boolean rich, Boolean tmMatches, Boolean projectTags, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'memoryId' is set
        if (memoryId == null) {
            throw new ApiException("Missing the required parameter 'memoryId' when calling translateSegment(Async)");
        }
        

        okhttp3.Call localVarCall = translateSegmentCall(memoryId, source, sourceHash, prefix, n, rich, tmMatches, projectTags, _callback);
        return localVarCall;

    }

    /**
     * Translate a segment
     * Translate a source string.  Setting the &#x60;rich&#x60; parameter to &#x60;true&#x60; will change the response format to include additional information about each translation including a model score, word alignments,  and formatting information. The rich format can be seen in the example response on this page.  By default, this endpoint also returns translation memory (TM) fuzzy matches, along with associated scores. Fuzzy matches always appear ahead of machine translation output in the response.  The maximum source length is 5,000 characters.  Usage charges apply to this endpoint for production REST API keys.  
     * @param memoryId A unique Memory identifier. (required)
     * @param source The source text to be translated. (optional)
     * @param sourceHash A source hash code. (optional)
     * @param prefix A target prefix. (optional)
     * @param n Return top n translations. (optional, default to 1)
     * @param rich Returns rich translation information (e.g., with word alignments). (optional, default to false)
     * @param tmMatches Include translation memory fuzzy matches. (optional, default to true)
     * @param projectTags Project tags. Projects tags in source to target if set to true. (optional, default to false)
     * @return TranslationList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A TranslationList object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public TranslationList translateSegment(Integer memoryId, String source, Integer sourceHash, String prefix, Integer n, Boolean rich, Boolean tmMatches, Boolean projectTags) throws ApiException {
        ApiResponse<TranslationList> localVarResp = translateSegmentWithHttpInfo(memoryId, source, sourceHash, prefix, n, rich, tmMatches, projectTags);
        return localVarResp.getData();
    }

    /**
     * Translate a segment
     * Translate a source string.  Setting the &#x60;rich&#x60; parameter to &#x60;true&#x60; will change the response format to include additional information about each translation including a model score, word alignments,  and formatting information. The rich format can be seen in the example response on this page.  By default, this endpoint also returns translation memory (TM) fuzzy matches, along with associated scores. Fuzzy matches always appear ahead of machine translation output in the response.  The maximum source length is 5,000 characters.  Usage charges apply to this endpoint for production REST API keys.  
     * @param memoryId A unique Memory identifier. (required)
     * @param source The source text to be translated. (optional)
     * @param sourceHash A source hash code. (optional)
     * @param prefix A target prefix. (optional)
     * @param n Return top n translations. (optional, default to 1)
     * @param rich Returns rich translation information (e.g., with word alignments). (optional, default to false)
     * @param tmMatches Include translation memory fuzzy matches. (optional, default to true)
     * @param projectTags Project tags. Projects tags in source to target if set to true. (optional, default to false)
     * @return ApiResponse&lt;TranslationList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A TranslationList object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TranslationList> translateSegmentWithHttpInfo(Integer memoryId, String source, Integer sourceHash, String prefix, Integer n, Boolean rich, Boolean tmMatches, Boolean projectTags) throws ApiException {
        okhttp3.Call localVarCall = translateSegmentValidateBeforeCall(memoryId, source, sourceHash, prefix, n, rich, tmMatches, projectTags, null);
        Type localVarReturnType = new TypeToken<TranslationList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Translate a segment (asynchronously)
     * Translate a source string.  Setting the &#x60;rich&#x60; parameter to &#x60;true&#x60; will change the response format to include additional information about each translation including a model score, word alignments,  and formatting information. The rich format can be seen in the example response on this page.  By default, this endpoint also returns translation memory (TM) fuzzy matches, along with associated scores. Fuzzy matches always appear ahead of machine translation output in the response.  The maximum source length is 5,000 characters.  Usage charges apply to this endpoint for production REST API keys.  
     * @param memoryId A unique Memory identifier. (required)
     * @param source The source text to be translated. (optional)
     * @param sourceHash A source hash code. (optional)
     * @param prefix A target prefix. (optional)
     * @param n Return top n translations. (optional, default to 1)
     * @param rich Returns rich translation information (e.g., with word alignments). (optional, default to false)
     * @param tmMatches Include translation memory fuzzy matches. (optional, default to true)
     * @param projectTags Project tags. Projects tags in source to target if set to true. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A TranslationList object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call translateSegmentAsync(Integer memoryId, String source, Integer sourceHash, String prefix, Integer n, Boolean rich, Boolean tmMatches, Boolean projectTags, final ApiCallback<TranslationList> _callback) throws ApiException {

        okhttp3.Call localVarCall = translateSegmentValidateBeforeCall(memoryId, source, sourceHash, prefix, n, rich, tmMatches, projectTags, _callback);
        Type localVarReturnType = new TypeToken<TranslationList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
