/*
 * Lilt REST API
 * Lilt REST API Support: https://lilt.atlassian.net/servicedesk/customer/portals    The Lilt REST API enables programmatic access to the full-range of Lilt backend services including:   * Training of and translating with interactive, adaptive machine translation   * Large-scale translation memory   * The Lexicon (a large-scale termbase)   * Programmatic control of the Lilt CAT environment   * Translation memory synchronization  Requests and responses are in JSON format. The REST API only responds to HTTPS / SSL requests.  The base url for this REST API is `https://api.lilt.com/`.  ## Authentication  Requests are authenticated via REST API key, which requires the Business plan.  Requests are authenticated using [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication). Add your REST API key as both the `username` and `password`.  For development, you may also pass the REST API key via the `key` query parameter. This is less secure than HTTP Basic Auth, and is not recommended for production use.  ## Quotas  Our services have a general quota of 4000 requests per minute. Should you hit the maximum requests per minute, you will need to wait 60 seconds before you can send another request. 
 *
 * The version of the OpenAPI document: v3.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.lilt.client.api;

import com.lilt.client.ApiCallback;
import com.lilt.client.ApiClient;
import com.lilt.client.ApiException;
import com.lilt.client.ApiResponse;
import com.lilt.client.Configuration;
import com.lilt.client.Pair;
import com.lilt.client.ProgressRequestBody;
import com.lilt.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.lilt.client.model.CreateConverterConfigParameters;
import com.lilt.client.model.Error;
import com.lilt.client.model.GetLiltCreateContentResponse;
import com.lilt.client.model.InlineResponse200;
import com.lilt.client.model.LiltCreateContent;
import com.lilt.client.model.LiltCreateContentRequest;
import com.lilt.client.model.SignLiltCreateTermsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CreateApi {
    private ApiClient localVarApiClient;

    public CreateApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CreateApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for deleteLiltCreateContent
     * @param contentId The content ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Delete Lilt Create Content Response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteLiltCreateContentCall(Integer contentId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/create/{contentId}"
            .replaceAll("\\{" + "contentId" + "\\}", localVarApiClient.escapeString(contentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/octet-stream", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteLiltCreateContentValidateBeforeCall(Integer contentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentId' is set
        if (contentId == null) {
            throw new ApiException("Missing the required parameter 'contentId' when calling deleteLiltCreateContent(Async)");
        }
        

        okhttp3.Call localVarCall = deleteLiltCreateContentCall(contentId, _callback);
        return localVarCall;

    }

    /**
     * Delete Lilt Create content
     * Delete a piece of Lilt Create content.  Example CURL: &#x60;&#x60;&#x60;bash curl -X DELETE &#39;https://api.lilt.com/v2/create/1234?key&#x3D;API_KEY&#39; &#x60;&#x60;&#x60;  
     * @param contentId The content ID. (required)
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Delete Lilt Create Content Response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse200 deleteLiltCreateContent(Integer contentId) throws ApiException {
        ApiResponse<InlineResponse200> localVarResp = deleteLiltCreateContentWithHttpInfo(contentId);
        return localVarResp.getData();
    }

    /**
     * Delete Lilt Create content
     * Delete a piece of Lilt Create content.  Example CURL: &#x60;&#x60;&#x60;bash curl -X DELETE &#39;https://api.lilt.com/v2/create/1234?key&#x3D;API_KEY&#39; &#x60;&#x60;&#x60;  
     * @param contentId The content ID. (required)
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Delete Lilt Create Content Response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse200> deleteLiltCreateContentWithHttpInfo(Integer contentId) throws ApiException {
        okhttp3.Call localVarCall = deleteLiltCreateContentValidateBeforeCall(contentId, null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Lilt Create content (asynchronously)
     * Delete a piece of Lilt Create content.  Example CURL: &#x60;&#x60;&#x60;bash curl -X DELETE &#39;https://api.lilt.com/v2/create/1234?key&#x3D;API_KEY&#39; &#x60;&#x60;&#x60;  
     * @param contentId The content ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Delete Lilt Create Content Response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteLiltCreateContentAsync(Integer contentId, final ApiCallback<InlineResponse200> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteLiltCreateContentValidateBeforeCall(contentId, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for generateLiltCreateContent
     * @param templateParams Input parameters that determine what content will be generated.  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An event stream produced by Server Side Events. The following events are supported. - message: an object with the newly generated text (e.g. {\&quot;text\&quot;: \&quot;hello\&quot;}) - message: upon completion of events the string \&quot;[DONE]\&quot; will be emitted - fullcontent: an object containing the full response  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateLiltCreateContentCall(LiltCreateContentRequest templateParams, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = templateParams;

        // create path and map variables
        String localVarPath = "/v2/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream", "text/plain", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateLiltCreateContentValidateBeforeCall(LiltCreateContentRequest templateParams, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'templateParams' is set
        if (templateParams == null) {
            throw new ApiException("Missing the required parameter 'templateParams' when calling generateLiltCreateContent(Async)");
        }
        

        okhttp3.Call localVarCall = generateLiltCreateContentCall(templateParams, _callback);
        return localVarCall;

    }

    /**
     * Generate new Lilt Create content
     * Generate new Lilt Create content with the given parameters.  Example CURL: &#x60;&#x60;&#x60;bash curl -X POST &#39;https://api.lilt.com/v2/create?key&#x3D;API_KEY&#39; \\ --header &#39;Content-Type: application/json&#39; \\ --data-raw &#39;{   \&quot;language\&quot;:\&quot;en-US\&quot;,   \&quot;template\&quot;:\&quot;blog-post\&quot;,   \&quot;templateParams\&quot;:{     \&quot;contentLength\&quot;:\&quot;100\&quot;,     \&quot;language\&quot;:\&quot;en-US\&quot;,     \&quot;sections\&quot;:[],     \&quot;summary\&quot;:\&quot;a blog post about hiking\&quot;     },   \&quot;preferences\&quot;:{\&quot;tone\&quot;:\&quot;formal\&quot;,\&quot;styleguide\&quot;:\&quot;\&quot;} }&#39; &#x60;&#x60;&#x60;  
     * @param templateParams Input parameters that determine what content will be generated.  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An event stream produced by Server Side Events. The following events are supported. - message: an object with the newly generated text (e.g. {\&quot;text\&quot;: \&quot;hello\&quot;}) - message: upon completion of events the string \&quot;[DONE]\&quot; will be emitted - fullcontent: an object containing the full response  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void generateLiltCreateContent(LiltCreateContentRequest templateParams) throws ApiException {
        generateLiltCreateContentWithHttpInfo(templateParams);
    }

    /**
     * Generate new Lilt Create content
     * Generate new Lilt Create content with the given parameters.  Example CURL: &#x60;&#x60;&#x60;bash curl -X POST &#39;https://api.lilt.com/v2/create?key&#x3D;API_KEY&#39; \\ --header &#39;Content-Type: application/json&#39; \\ --data-raw &#39;{   \&quot;language\&quot;:\&quot;en-US\&quot;,   \&quot;template\&quot;:\&quot;blog-post\&quot;,   \&quot;templateParams\&quot;:{     \&quot;contentLength\&quot;:\&quot;100\&quot;,     \&quot;language\&quot;:\&quot;en-US\&quot;,     \&quot;sections\&quot;:[],     \&quot;summary\&quot;:\&quot;a blog post about hiking\&quot;     },   \&quot;preferences\&quot;:{\&quot;tone\&quot;:\&quot;formal\&quot;,\&quot;styleguide\&quot;:\&quot;\&quot;} }&#39; &#x60;&#x60;&#x60;  
     * @param templateParams Input parameters that determine what content will be generated.  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An event stream produced by Server Side Events. The following events are supported. - message: an object with the newly generated text (e.g. {\&quot;text\&quot;: \&quot;hello\&quot;}) - message: upon completion of events the string \&quot;[DONE]\&quot; will be emitted - fullcontent: an object containing the full response  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> generateLiltCreateContentWithHttpInfo(LiltCreateContentRequest templateParams) throws ApiException {
        okhttp3.Call localVarCall = generateLiltCreateContentValidateBeforeCall(templateParams, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Generate new Lilt Create content (asynchronously)
     * Generate new Lilt Create content with the given parameters.  Example CURL: &#x60;&#x60;&#x60;bash curl -X POST &#39;https://api.lilt.com/v2/create?key&#x3D;API_KEY&#39; \\ --header &#39;Content-Type: application/json&#39; \\ --data-raw &#39;{   \&quot;language\&quot;:\&quot;en-US\&quot;,   \&quot;template\&quot;:\&quot;blog-post\&quot;,   \&quot;templateParams\&quot;:{     \&quot;contentLength\&quot;:\&quot;100\&quot;,     \&quot;language\&quot;:\&quot;en-US\&quot;,     \&quot;sections\&quot;:[],     \&quot;summary\&quot;:\&quot;a blog post about hiking\&quot;     },   \&quot;preferences\&quot;:{\&quot;tone\&quot;:\&quot;formal\&quot;,\&quot;styleguide\&quot;:\&quot;\&quot;} }&#39; &#x60;&#x60;&#x60;  
     * @param templateParams Input parameters that determine what content will be generated.  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An event stream produced by Server Side Events. The following events are supported. - message: an object with the newly generated text (e.g. {\&quot;text\&quot;: \&quot;hello\&quot;}) - message: upon completion of events the string \&quot;[DONE]\&quot; will be emitted - fullcontent: an object containing the full response  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateLiltCreateContentAsync(LiltCreateContentRequest templateParams, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateLiltCreateContentValidateBeforeCall(templateParams, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLiltCreateById
     * @param contentId The content ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Lilt Create content. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLiltCreateByIdCall(Integer contentId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/create/{contentId}"
            .replaceAll("\\{" + "contentId" + "\\}", localVarApiClient.escapeString(contentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/octet-stream", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLiltCreateByIdValidateBeforeCall(Integer contentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentId' is set
        if (contentId == null) {
            throw new ApiException("Missing the required parameter 'contentId' when calling getLiltCreateById(Async)");
        }
        

        okhttp3.Call localVarCall = getLiltCreateByIdCall(contentId, _callback);
        return localVarCall;

    }

    /**
     * Get Lilt Create content by ID.
     * Get Lilt Create content by ID.  Example CURL: &#x60;&#x60;&#x60;bash curl -X GET &#39;https://api.lilt.com/v2/create/1234?key&#x3D;API_KEY&#39; &#x60;&#x60;&#x60;  
     * @param contentId The content ID. (required)
     * @return LiltCreateContent
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Lilt Create content. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public LiltCreateContent getLiltCreateById(Integer contentId) throws ApiException {
        ApiResponse<LiltCreateContent> localVarResp = getLiltCreateByIdWithHttpInfo(contentId);
        return localVarResp.getData();
    }

    /**
     * Get Lilt Create content by ID.
     * Get Lilt Create content by ID.  Example CURL: &#x60;&#x60;&#x60;bash curl -X GET &#39;https://api.lilt.com/v2/create/1234?key&#x3D;API_KEY&#39; &#x60;&#x60;&#x60;  
     * @param contentId The content ID. (required)
     * @return ApiResponse&lt;LiltCreateContent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Lilt Create content. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LiltCreateContent> getLiltCreateByIdWithHttpInfo(Integer contentId) throws ApiException {
        okhttp3.Call localVarCall = getLiltCreateByIdValidateBeforeCall(contentId, null);
        Type localVarReturnType = new TypeToken<LiltCreateContent>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Lilt Create content by ID. (asynchronously)
     * Get Lilt Create content by ID.  Example CURL: &#x60;&#x60;&#x60;bash curl -X GET &#39;https://api.lilt.com/v2/create/1234?key&#x3D;API_KEY&#39; &#x60;&#x60;&#x60;  
     * @param contentId The content ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Lilt Create content. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLiltCreateByIdAsync(Integer contentId, final ApiCallback<LiltCreateContent> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLiltCreateByIdValidateBeforeCall(contentId, _callback);
        Type localVarReturnType = new TypeToken<LiltCreateContent>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLiltCreateContent
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object with a documents next task Workflow metadata. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLiltCreateContentCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/octet-stream", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLiltCreateContentValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getLiltCreateContentCall(_callback);
        return localVarCall;

    }

    /**
     * Get Lilt Create content
     * Get a list of all content that has been generated by Lilt Create.  Example CURL: &#x60;&#x60;&#x60;bash curl -X GET &#39;https://api.lilt.com/v2/create?key&#x3D;API_KEY&#39; &#x60;&#x60;&#x60;  
     * @return GetLiltCreateContentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object with a documents next task Workflow metadata. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public GetLiltCreateContentResponse getLiltCreateContent() throws ApiException {
        ApiResponse<GetLiltCreateContentResponse> localVarResp = getLiltCreateContentWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get Lilt Create content
     * Get a list of all content that has been generated by Lilt Create.  Example CURL: &#x60;&#x60;&#x60;bash curl -X GET &#39;https://api.lilt.com/v2/create?key&#x3D;API_KEY&#39; &#x60;&#x60;&#x60;  
     * @return ApiResponse&lt;GetLiltCreateContentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object with a documents next task Workflow metadata. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetLiltCreateContentResponse> getLiltCreateContentWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getLiltCreateContentValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<GetLiltCreateContentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Lilt Create content (asynchronously)
     * Get a list of all content that has been generated by Lilt Create.  Example CURL: &#x60;&#x60;&#x60;bash curl -X GET &#39;https://api.lilt.com/v2/create?key&#x3D;API_KEY&#39; &#x60;&#x60;&#x60;  
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object with a documents next task Workflow metadata. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLiltCreateContentAsync(final ApiCallback<GetLiltCreateContentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLiltCreateContentValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<GetLiltCreateContentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLiltCreatePreferences
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object describing the stored preferences. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLiltCreatePreferencesCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/create/preferences";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream", "text/plain", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLiltCreatePreferencesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getLiltCreatePreferencesCall(_callback);
        return localVarCall;

    }

    /**
     * Get Lilt Create preferences
     * Get the stored preferences for Lilt Create.  Example CURL: &#x60;&#x60;&#x60;bash curl -X POST &#39;https://api.lilt.com/v2/create/preferences?key&#x3D;API_KEY&#39; &#x60;&#x60;&#x60;  
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object describing the stored preferences. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void getLiltCreatePreferences() throws ApiException {
        getLiltCreatePreferencesWithHttpInfo();
    }

    /**
     * Get Lilt Create preferences
     * Get the stored preferences for Lilt Create.  Example CURL: &#x60;&#x60;&#x60;bash curl -X POST &#39;https://api.lilt.com/v2/create/preferences?key&#x3D;API_KEY&#39; &#x60;&#x60;&#x60;  
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object describing the stored preferences. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getLiltCreatePreferencesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getLiltCreatePreferencesValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get Lilt Create preferences (asynchronously)
     * Get the stored preferences for Lilt Create.  Example CURL: &#x60;&#x60;&#x60;bash curl -X POST &#39;https://api.lilt.com/v2/create/preferences?key&#x3D;API_KEY&#39; &#x60;&#x60;&#x60;  
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object describing the stored preferences. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLiltCreatePreferencesAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLiltCreatePreferencesValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for regenerateLiltCreateContent
     * @param contentId The content ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An event stream produced by Server Side Events. The following events are supported. - message: an object with the newly generated text (e.g. {\&quot;text\&quot;: \&quot;hello\&quot;}) - message: upon completion of events the string \&quot;[DONE]\&quot; will be emitted - fullcontent: an object containing the full response  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call regenerateLiltCreateContentCall(Integer contentId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/create/{contentId}/create"
            .replaceAll("\\{" + "contentId" + "\\}", localVarApiClient.escapeString(contentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream", "text/plain", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call regenerateLiltCreateContentValidateBeforeCall(Integer contentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentId' is set
        if (contentId == null) {
            throw new ApiException("Missing the required parameter 'contentId' when calling regenerateLiltCreateContent(Async)");
        }
        

        okhttp3.Call localVarCall = regenerateLiltCreateContentCall(contentId, _callback);
        return localVarCall;

    }

    /**
     * Regenerate Lilt Create content
     * Regenerate the given piece of content with the current parameters.  Example CURL: &#x60;&#x60;&#x60;bash curl -X GET &#39;https://api.lilt.com/v2/create/1234/create?key&#x3D;API_KEY&#39; &#x60;&#x60;&#x60;  
     * @param contentId The content ID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An event stream produced by Server Side Events. The following events are supported. - message: an object with the newly generated text (e.g. {\&quot;text\&quot;: \&quot;hello\&quot;}) - message: upon completion of events the string \&quot;[DONE]\&quot; will be emitted - fullcontent: an object containing the full response  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void regenerateLiltCreateContent(Integer contentId) throws ApiException {
        regenerateLiltCreateContentWithHttpInfo(contentId);
    }

    /**
     * Regenerate Lilt Create content
     * Regenerate the given piece of content with the current parameters.  Example CURL: &#x60;&#x60;&#x60;bash curl -X GET &#39;https://api.lilt.com/v2/create/1234/create?key&#x3D;API_KEY&#39; &#x60;&#x60;&#x60;  
     * @param contentId The content ID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An event stream produced by Server Side Events. The following events are supported. - message: an object with the newly generated text (e.g. {\&quot;text\&quot;: \&quot;hello\&quot;}) - message: upon completion of events the string \&quot;[DONE]\&quot; will be emitted - fullcontent: an object containing the full response  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> regenerateLiltCreateContentWithHttpInfo(Integer contentId) throws ApiException {
        okhttp3.Call localVarCall = regenerateLiltCreateContentValidateBeforeCall(contentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Regenerate Lilt Create content (asynchronously)
     * Regenerate the given piece of content with the current parameters.  Example CURL: &#x60;&#x60;&#x60;bash curl -X GET &#39;https://api.lilt.com/v2/create/1234/create?key&#x3D;API_KEY&#39; &#x60;&#x60;&#x60;  
     * @param contentId The content ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An event stream produced by Server Side Events. The following events are supported. - message: an object with the newly generated text (e.g. {\&quot;text\&quot;: \&quot;hello\&quot;}) - message: upon completion of events the string \&quot;[DONE]\&quot; will be emitted - fullcontent: an object containing the full response  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call regenerateLiltCreateContentAsync(Integer contentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = regenerateLiltCreateContentValidateBeforeCall(contentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for signLiltCreateTerms
     * @param signedAgreement  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object indicating whether the agreement has been signed or not.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signLiltCreateTermsCall(CreateConverterConfigParameters signedAgreement, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = signedAgreement;

        // create path and map variables
        String localVarPath = "/v2/create/terms-and-conditions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/octet-stream", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call signLiltCreateTermsValidateBeforeCall(CreateConverterConfigParameters signedAgreement, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'signedAgreement' is set
        if (signedAgreement == null) {
            throw new ApiException("Missing the required parameter 'signedAgreement' when calling signLiltCreateTerms(Async)");
        }
        

        okhttp3.Call localVarCall = signLiltCreateTermsCall(signedAgreement, _callback);
        return localVarCall;

    }

    /**
     * Sign the Lilt Create terms and conditions
     * Lilt Create requires that the terms and conditions are signed first before using it. The terms and conditions can be signed by using this endpoint.  Example CURL: &#x60;&#x60;&#x60;bash curl -X POST &#39;https://api.lilt.com/v2/create/terms-and-conditions?key&#x3D;API_KEY&#39; \\ --header &#39;Content-Type: application/json&#39; \\ --data-raw &#39;{\&quot;signedAgreement\&quot;: true}&#39; &#x60;&#x60;&#x60;  
     * @param signedAgreement  (required)
     * @return SignLiltCreateTermsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object indicating whether the agreement has been signed or not.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public SignLiltCreateTermsResponse signLiltCreateTerms(CreateConverterConfigParameters signedAgreement) throws ApiException {
        ApiResponse<SignLiltCreateTermsResponse> localVarResp = signLiltCreateTermsWithHttpInfo(signedAgreement);
        return localVarResp.getData();
    }

    /**
     * Sign the Lilt Create terms and conditions
     * Lilt Create requires that the terms and conditions are signed first before using it. The terms and conditions can be signed by using this endpoint.  Example CURL: &#x60;&#x60;&#x60;bash curl -X POST &#39;https://api.lilt.com/v2/create/terms-and-conditions?key&#x3D;API_KEY&#39; \\ --header &#39;Content-Type: application/json&#39; \\ --data-raw &#39;{\&quot;signedAgreement\&quot;: true}&#39; &#x60;&#x60;&#x60;  
     * @param signedAgreement  (required)
     * @return ApiResponse&lt;SignLiltCreateTermsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object indicating whether the agreement has been signed or not.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SignLiltCreateTermsResponse> signLiltCreateTermsWithHttpInfo(CreateConverterConfigParameters signedAgreement) throws ApiException {
        okhttp3.Call localVarCall = signLiltCreateTermsValidateBeforeCall(signedAgreement, null);
        Type localVarReturnType = new TypeToken<SignLiltCreateTermsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Sign the Lilt Create terms and conditions (asynchronously)
     * Lilt Create requires that the terms and conditions are signed first before using it. The terms and conditions can be signed by using this endpoint.  Example CURL: &#x60;&#x60;&#x60;bash curl -X POST &#39;https://api.lilt.com/v2/create/terms-and-conditions?key&#x3D;API_KEY&#39; \\ --header &#39;Content-Type: application/json&#39; \\ --data-raw &#39;{\&quot;signedAgreement\&quot;: true}&#39; &#x60;&#x60;&#x60;  
     * @param signedAgreement  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object indicating whether the agreement has been signed or not.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signLiltCreateTermsAsync(CreateConverterConfigParameters signedAgreement, final ApiCallback<SignLiltCreateTermsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = signLiltCreateTermsValidateBeforeCall(signedAgreement, _callback);
        Type localVarReturnType = new TypeToken<SignLiltCreateTermsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateLiltCreateContent
     * @param contentId The content ID. (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated Lilt Create content. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateLiltCreateContentCall(Integer contentId, LiltCreateContent body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v2/create/{contentId}"
            .replaceAll("\\{" + "contentId" + "\\}", localVarApiClient.escapeString(contentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/octet-stream", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateLiltCreateContentValidateBeforeCall(Integer contentId, LiltCreateContent body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentId' is set
        if (contentId == null) {
            throw new ApiException("Missing the required parameter 'contentId' when calling updateLiltCreateContent(Async)");
        }
        

        okhttp3.Call localVarCall = updateLiltCreateContentCall(contentId, body, _callback);
        return localVarCall;

    }

    /**
     * Update Lilt Create content
     * Update a piece of Lilt Create content.  Example CURL: &#x60;&#x60;&#x60;bash curl -X PUT &#39;https://api.lilt.com/v2/create/1234?key&#x3D;API_KEY&#39; \\ --header &#39;Content-Type: application/json&#39; \\ --data-raw &#39;{\&quot;language\&quot;:\&quot;de-DE\&quot;}&#39; &#x60;&#x60;&#x60;  
     * @param contentId The content ID. (required)
     * @param body  (optional)
     * @return LiltCreateContent
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated Lilt Create content. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public LiltCreateContent updateLiltCreateContent(Integer contentId, LiltCreateContent body) throws ApiException {
        ApiResponse<LiltCreateContent> localVarResp = updateLiltCreateContentWithHttpInfo(contentId, body);
        return localVarResp.getData();
    }

    /**
     * Update Lilt Create content
     * Update a piece of Lilt Create content.  Example CURL: &#x60;&#x60;&#x60;bash curl -X PUT &#39;https://api.lilt.com/v2/create/1234?key&#x3D;API_KEY&#39; \\ --header &#39;Content-Type: application/json&#39; \\ --data-raw &#39;{\&quot;language\&quot;:\&quot;de-DE\&quot;}&#39; &#x60;&#x60;&#x60;  
     * @param contentId The content ID. (required)
     * @param body  (optional)
     * @return ApiResponse&lt;LiltCreateContent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated Lilt Create content. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LiltCreateContent> updateLiltCreateContentWithHttpInfo(Integer contentId, LiltCreateContent body) throws ApiException {
        okhttp3.Call localVarCall = updateLiltCreateContentValidateBeforeCall(contentId, body, null);
        Type localVarReturnType = new TypeToken<LiltCreateContent>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Lilt Create content (asynchronously)
     * Update a piece of Lilt Create content.  Example CURL: &#x60;&#x60;&#x60;bash curl -X PUT &#39;https://api.lilt.com/v2/create/1234?key&#x3D;API_KEY&#39; \\ --header &#39;Content-Type: application/json&#39; \\ --data-raw &#39;{\&quot;language\&quot;:\&quot;de-DE\&quot;}&#39; &#x60;&#x60;&#x60;  
     * @param contentId The content ID. (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated Lilt Create content. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateLiltCreateContentAsync(Integer contentId, LiltCreateContent body, final ApiCallback<LiltCreateContent> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateLiltCreateContentValidateBeforeCall(contentId, body, _callback);
        Type localVarReturnType = new TypeToken<LiltCreateContent>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateLiltCreatePreferences
     * @param styleguide Which styleguide to use. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated Lilt Create preferences. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateLiltCreatePreferencesCall(LiltCreateContent styleguide, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = styleguide;

        // create path and map variables
        String localVarPath = "/v2/create/preferences";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream", "text/plain", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateLiltCreatePreferencesValidateBeforeCall(LiltCreateContent styleguide, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = updateLiltCreatePreferencesCall(styleguide, _callback);
        return localVarCall;

    }

    /**
     * Update Lilt Create preferences
     * Update the stored preferences for Lilt Create.  Example CURL: &#x60;&#x60;&#x60;bash curl -X PUT &#39;https://api.lilt.com/v2/create/preferences?key&#x3D;API_KEY&#39; \\ --header &#39;Content-Type: application/json&#39; \\ --data-raw &#39;{\&quot;tone\&quot;: \&quot;formal\&quot;, \&quot;styleguide\&quot;: \&quot;\&quot;}&#39; &#x60;&#x60;&#x60;  
     * @param styleguide Which styleguide to use. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated Lilt Create preferences. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void updateLiltCreatePreferences(LiltCreateContent styleguide) throws ApiException {
        updateLiltCreatePreferencesWithHttpInfo(styleguide);
    }

    /**
     * Update Lilt Create preferences
     * Update the stored preferences for Lilt Create.  Example CURL: &#x60;&#x60;&#x60;bash curl -X PUT &#39;https://api.lilt.com/v2/create/preferences?key&#x3D;API_KEY&#39; \\ --header &#39;Content-Type: application/json&#39; \\ --data-raw &#39;{\&quot;tone\&quot;: \&quot;formal\&quot;, \&quot;styleguide\&quot;: \&quot;\&quot;}&#39; &#x60;&#x60;&#x60;  
     * @param styleguide Which styleguide to use. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated Lilt Create preferences. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateLiltCreatePreferencesWithHttpInfo(LiltCreateContent styleguide) throws ApiException {
        okhttp3.Call localVarCall = updateLiltCreatePreferencesValidateBeforeCall(styleguide, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update Lilt Create preferences (asynchronously)
     * Update the stored preferences for Lilt Create.  Example CURL: &#x60;&#x60;&#x60;bash curl -X PUT &#39;https://api.lilt.com/v2/create/preferences?key&#x3D;API_KEY&#39; \\ --header &#39;Content-Type: application/json&#39; \\ --data-raw &#39;{\&quot;tone\&quot;: \&quot;formal\&quot;, \&quot;styleguide\&quot;: \&quot;\&quot;}&#39; &#x60;&#x60;&#x60;  
     * @param styleguide Which styleguide to use. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated Lilt Create preferences. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateLiltCreatePreferencesAsync(LiltCreateContent styleguide, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateLiltCreatePreferencesValidateBeforeCall(styleguide, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
