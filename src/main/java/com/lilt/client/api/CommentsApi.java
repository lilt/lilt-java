/*
 * Lilt REST API
 * The Lilt REST API enables programmatic access to the full-range of Lilt backend services including:   * Training of and translating with interactive, adaptive machine translation   * Large-scale translation memory   * The Lexicon (a large-scale termbase)   * Programmatic control of the Lilt CAT environment   * Translation memory synchronization  Requests and responses are in JSON format. The REST API only responds to HTTPS / SSL requests. ## Authentication Requests are authenticated via REST API key, which requires the Business plan.  Requests are authenticated using [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication). Add your REST API key as both the `username` and `password`.  For development, you may also pass the REST API key via the `key` query parameter. This is less secure than HTTP Basic Auth, and is not recommended for production use. 
 *
 * The version of the OpenAPI document: v2.0
 * Contact: support@lilt.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.lilt.client.api;

import com.lilt.client.ApiCallback;
import com.lilt.client.ApiClient;
import com.lilt.client.ApiException;
import com.lilt.client.ApiResponse;
import com.lilt.client.Configuration;
import com.lilt.client.Pair;
import com.lilt.client.ProgressRequestBody;
import com.lilt.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.lilt.client.model.Comment;
import com.lilt.client.model.CommentBody;
import com.lilt.client.model.CommentDeleteResponse;
import com.lilt.client.model.DocumentComments;
import com.lilt.client.model.Error;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CommentsApi {
    private ApiClient localVarApiClient;

    public CommentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CommentsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createComment
     * @param documentId A unique document identifier. (required)
     * @param segmentId A unique segment identifier. (required)
     * @param body The comment being created (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A Comment object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCommentCall(Integer documentId, Integer segmentId, CommentBody body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/comments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (documentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("document_id", documentId));
        }

        if (segmentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("segment_id", segmentId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCommentValidateBeforeCall(Integer documentId, Integer segmentId, CommentBody body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling createComment(Async)");
        }
        
        // verify the required parameter 'segmentId' is set
        if (segmentId == null) {
            throw new ApiException("Missing the required parameter 'segmentId' when calling createComment(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createComment(Async)");
        }
        

        okhttp3.Call localVarCall = createCommentCall(documentId, segmentId, body, _callback);
        return localVarCall;

    }

    /**
     * Create a new comment
     * Create a new comment for the specified Segment ID.
     * @param documentId A unique document identifier. (required)
     * @param segmentId A unique segment identifier. (required)
     * @param body The comment being created (required)
     * @return Comment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A Comment object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public Comment createComment(Integer documentId, Integer segmentId, CommentBody body) throws ApiException {
        ApiResponse<Comment> localVarResp = createCommentWithHttpInfo(documentId, segmentId, body);
        return localVarResp.getData();
    }

    /**
     * Create a new comment
     * Create a new comment for the specified Segment ID.
     * @param documentId A unique document identifier. (required)
     * @param segmentId A unique segment identifier. (required)
     * @param body The comment being created (required)
     * @return ApiResponse&lt;Comment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A Comment object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Comment> createCommentWithHttpInfo(Integer documentId, Integer segmentId, CommentBody body) throws ApiException {
        okhttp3.Call localVarCall = createCommentValidateBeforeCall(documentId, segmentId, body, null);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new comment (asynchronously)
     * Create a new comment for the specified Segment ID.
     * @param documentId A unique document identifier. (required)
     * @param segmentId A unique segment identifier. (required)
     * @param body The comment being created (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A Comment object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCommentAsync(Integer documentId, Integer segmentId, CommentBody body, final ApiCallback<Comment> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCommentValidateBeforeCall(documentId, segmentId, body, _callback);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteComment
     * @param commentId A unique Comment identifier. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> A status object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCommentCall(Integer commentId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/comments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (commentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("comment_id", commentId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCommentValidateBeforeCall(Integer commentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling deleteComment(Async)");
        }
        

        okhttp3.Call localVarCall = deleteCommentCall(commentId, _callback);
        return localVarCall;

    }

    /**
     * Delete a Comment
     * Delete a Comment.  Example CURL command: &#x60;&#x60;&#x60;   curl -X DELETE https://lilt.com/2/comments?key&#x3D;API_KEY&amp;comment_id&#x3D;123 &#x60;&#x60;&#x60; 
     * @param commentId A unique Comment identifier. (required)
     * @return CommentDeleteResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> A status object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public CommentDeleteResponse deleteComment(Integer commentId) throws ApiException {
        ApiResponse<CommentDeleteResponse> localVarResp = deleteCommentWithHttpInfo(commentId);
        return localVarResp.getData();
    }

    /**
     * Delete a Comment
     * Delete a Comment.  Example CURL command: &#x60;&#x60;&#x60;   curl -X DELETE https://lilt.com/2/comments?key&#x3D;API_KEY&amp;comment_id&#x3D;123 &#x60;&#x60;&#x60; 
     * @param commentId A unique Comment identifier. (required)
     * @return ApiResponse&lt;CommentDeleteResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> A status object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommentDeleteResponse> deleteCommentWithHttpInfo(Integer commentId) throws ApiException {
        okhttp3.Call localVarCall = deleteCommentValidateBeforeCall(commentId, null);
        Type localVarReturnType = new TypeToken<CommentDeleteResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a Comment (asynchronously)
     * Delete a Comment.  Example CURL command: &#x60;&#x60;&#x60;   curl -X DELETE https://lilt.com/2/comments?key&#x3D;API_KEY&amp;comment_id&#x3D;123 &#x60;&#x60;&#x60; 
     * @param commentId A unique Comment identifier. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> A status object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCommentAsync(Integer commentId, final ApiCallback<CommentDeleteResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCommentValidateBeforeCall(commentId, _callback);
        Type localVarReturnType = new TypeToken<CommentDeleteResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDocumentComments
     * @param documentId A unique document identifier. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object containing lists of comments identified by the id of the segment to which they belong. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Comment deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDocumentCommentsCall(Integer documentId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/comments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (documentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("document_id", documentId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDocumentCommentsValidateBeforeCall(Integer documentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling getDocumentComments(Async)");
        }
        

        okhttp3.Call localVarCall = getDocumentCommentsCall(documentId, _callback);
        return localVarCall;

    }

    /**
     * Retrieve a document&#39;s comments by segment
     * Retrieves all comments associated with a specified document, grouped by their Segment&#39;s ID.  To retrieve a document&#39;s comments, specify the &lt;strong&gt;document_id&lt;/strong&gt; request parameter.  Example CURL command: &#x60;&#x60;&#x60;   curl -X GET https://lilt.com/2/comments?key&#x3D;API_KEY&amp;document_id&#x3D;123 &#x60;&#x60;&#x60; 
     * @param documentId A unique document identifier. (required)
     * @return DocumentComments
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object containing lists of comments identified by the id of the segment to which they belong. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Comment deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public DocumentComments getDocumentComments(Integer documentId) throws ApiException {
        ApiResponse<DocumentComments> localVarResp = getDocumentCommentsWithHttpInfo(documentId);
        return localVarResp.getData();
    }

    /**
     * Retrieve a document&#39;s comments by segment
     * Retrieves all comments associated with a specified document, grouped by their Segment&#39;s ID.  To retrieve a document&#39;s comments, specify the &lt;strong&gt;document_id&lt;/strong&gt; request parameter.  Example CURL command: &#x60;&#x60;&#x60;   curl -X GET https://lilt.com/2/comments?key&#x3D;API_KEY&amp;document_id&#x3D;123 &#x60;&#x60;&#x60; 
     * @param documentId A unique document identifier. (required)
     * @return ApiResponse&lt;DocumentComments&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object containing lists of comments identified by the id of the segment to which they belong. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Comment deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentComments> getDocumentCommentsWithHttpInfo(Integer documentId) throws ApiException {
        okhttp3.Call localVarCall = getDocumentCommentsValidateBeforeCall(documentId, null);
        Type localVarReturnType = new TypeToken<DocumentComments>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a document&#39;s comments by segment (asynchronously)
     * Retrieves all comments associated with a specified document, grouped by their Segment&#39;s ID.  To retrieve a document&#39;s comments, specify the &lt;strong&gt;document_id&lt;/strong&gt; request parameter.  Example CURL command: &#x60;&#x60;&#x60;   curl -X GET https://lilt.com/2/comments?key&#x3D;API_KEY&amp;document_id&#x3D;123 &#x60;&#x60;&#x60; 
     * @param documentId A unique document identifier. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object containing lists of comments identified by the id of the segment to which they belong. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Comment deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDocumentCommentsAsync(Integer documentId, final ApiCallback<DocumentComments> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDocumentCommentsValidateBeforeCall(documentId, _callback);
        Type localVarReturnType = new TypeToken<DocumentComments>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateComment
     * @param commentId A unique comment identifier. (required)
     * @param documentId A unique document identifier. (required)
     * @param body The comment being updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A Comment object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCommentCall(Integer commentId, Integer documentId, CommentBody body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/comments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (commentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("comment_id", commentId));
        }

        if (documentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("document_id", documentId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCommentValidateBeforeCall(Integer commentId, Integer documentId, CommentBody body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling updateComment(Async)");
        }
        
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling updateComment(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateComment(Async)");
        }
        

        okhttp3.Call localVarCall = updateCommentCall(commentId, documentId, body, _callback);
        return localVarCall;

    }

    /**
     * Update an existing comment
     * Update an existing comment.
     * @param commentId A unique comment identifier. (required)
     * @param documentId A unique document identifier. (required)
     * @param body The comment being updated. (required)
     * @return Comment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A Comment object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public Comment updateComment(Integer commentId, Integer documentId, CommentBody body) throws ApiException {
        ApiResponse<Comment> localVarResp = updateCommentWithHttpInfo(commentId, documentId, body);
        return localVarResp.getData();
    }

    /**
     * Update an existing comment
     * Update an existing comment.
     * @param commentId A unique comment identifier. (required)
     * @param documentId A unique document identifier. (required)
     * @param body The comment being updated. (required)
     * @return ApiResponse&lt;Comment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A Comment object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Comment> updateCommentWithHttpInfo(Integer commentId, Integer documentId, CommentBody body) throws ApiException {
        okhttp3.Call localVarCall = updateCommentValidateBeforeCall(commentId, documentId, body, null);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an existing comment (asynchronously)
     * Update an existing comment.
     * @param commentId A unique comment identifier. (required)
     * @param documentId A unique document identifier. (required)
     * @param body The comment being updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A Comment object. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCommentAsync(Integer commentId, Integer documentId, CommentBody body, final ApiCallback<Comment> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCommentValidateBeforeCall(commentId, documentId, body, _callback);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
