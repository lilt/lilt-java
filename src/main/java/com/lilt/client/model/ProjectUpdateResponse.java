/*
 * Lilt REST API
 * The Lilt REST API enables programmatic access to the full-range of Lilt backend services including:   * Training of and translating with interactive, adaptive machine translation   * Large-scale translation memory   * The Lexicon (a large-scale termbase)   * Programmatic control of the Lilt CAT environment   * Translation memory synchronization  Requests and responses are in JSON format. The REST API only responds to HTTPS / SSL requests. ## Authentication Requests are authenticated via REST API key, which requires the Business plan.  Requests are authenticated using [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication). Add your REST API key as both the `username` and `password`.  For development, you may also pass the REST API key via the `key` query parameter. This is less secure than HTTP Basic Auth, and is not recommended for production use. 
 *
 * The version of the OpenAPI document: v2.0
 * Contact: support@lilt.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.lilt.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * ProjectUpdateResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-03-15T14:22:49.219647-07:00[America/Los_Angeles]")
public class ProjectUpdateResponse {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_DUE_DATE = "due_date";
  @SerializedName(SERIALIZED_NAME_DUE_DATE)
  private Integer dueDate;

  public static final String SERIALIZED_NAME_ARCHIVED = "archived";
  @SerializedName(SERIALIZED_NAME_ARCHIVED)
  private Boolean archived;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Object metadata;

  public static final String SERIALIZED_NAME_SAMPLE_REVIEW_PERCENTAGE = "sample_review_percentage";
  @SerializedName(SERIALIZED_NAME_SAMPLE_REVIEW_PERCENTAGE)
  private Integer sampleReviewPercentage;


  public ProjectUpdateResponse id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * A unique Project identifier.
   * @return id
  **/
  @ApiModelProperty(example = "1234", required = true, value = "A unique Project identifier.")

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    this.id = id;
  }


  public ProjectUpdateResponse name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The Project name.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Walker Percy Essays", value = "The Project name.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public ProjectUpdateResponse state(String state) {
    
    this.state = state;
    return this;
  }

   /**
   * The project&#39;s state. The possible states are &#39;backlog&#39;, &#39;inProgress&#39;, &#39;inReview&#39;, &#39;inQA&#39;, and &#39;done&#39;
   * @return state
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "backlog", value = "The project's state. The possible states are 'backlog', 'inProgress', 'inReview', 'inQA', and 'done'")

  public String getState() {
    return state;
  }


  public void setState(String state) {
    this.state = state;
  }


  public ProjectUpdateResponse dueDate(Integer dueDate) {
    
    this.dueDate = dueDate;
    return this;
  }

   /**
   * The due date. Measured in seconds since the Unix epoch.
   * @return dueDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1489147692", value = "The due date. Measured in seconds since the Unix epoch.")

  public Integer getDueDate() {
    return dueDate;
  }


  public void setDueDate(Integer dueDate) {
    this.dueDate = dueDate;
  }


  public ProjectUpdateResponse archived(Boolean archived) {
    
    this.archived = archived;
    return this;
  }

   /**
   * True if the project is archived. Otherwise, false.
   * @return archived
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "True if the project is archived. Otherwise, false.")

  public Boolean getArchived() {
    return archived;
  }


  public void setArchived(Boolean archived) {
    this.archived = archived;
  }


  public ProjectUpdateResponse metadata(Object metadata) {
    
    this.metadata = metadata;
    return this;
  }

   /**
   * Metadata associated with a project. This field must be valid JSON.
   * @return metadata
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "{\"connectorType\":\"github\",\"notes\":\"example metadata\"}", value = "Metadata associated with a project. This field must be valid JSON.")

  public Object getMetadata() {
    return metadata;
  }


  public void setMetadata(Object metadata) {
    this.metadata = metadata;
  }


  public ProjectUpdateResponse sampleReviewPercentage(Integer sampleReviewPercentage) {
    
    this.sampleReviewPercentage = sampleReviewPercentage;
    return this;
  }

   /**
   * The Project&#39;s sample review percentage. Must be an integer between 10 and 100, a multiple of 10 and greater than minimum value (displayed in error message).
   * @return sampleReviewPercentage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "20", value = "The Project's sample review percentage. Must be an integer between 10 and 100, a multiple of 10 and greater than minimum value (displayed in error message).")

  public Integer getSampleReviewPercentage() {
    return sampleReviewPercentage;
  }


  public void setSampleReviewPercentage(Integer sampleReviewPercentage) {
    this.sampleReviewPercentage = sampleReviewPercentage;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProjectUpdateResponse projectUpdateResponse = (ProjectUpdateResponse) o;
    return Objects.equals(this.id, projectUpdateResponse.id) &&
        Objects.equals(this.name, projectUpdateResponse.name) &&
        Objects.equals(this.state, projectUpdateResponse.state) &&
        Objects.equals(this.dueDate, projectUpdateResponse.dueDate) &&
        Objects.equals(this.archived, projectUpdateResponse.archived) &&
        Objects.equals(this.metadata, projectUpdateResponse.metadata) &&
        Objects.equals(this.sampleReviewPercentage, projectUpdateResponse.sampleReviewPercentage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, state, dueDate, archived, metadata, sampleReviewPercentage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProjectUpdateResponse {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    dueDate: ").append(toIndentedString(dueDate)).append("\n");
    sb.append("    archived: ").append(toIndentedString(archived)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    sampleReviewPercentage: ").append(toIndentedString(sampleReviewPercentage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

