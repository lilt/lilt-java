/*
 * Lilt REST API
 * The Lilt REST API enables programmatic access to the full-range of Lilt backend services including:   * Training of and translating with interactive, adaptive machine translation   * Large-scale translation memory   * The Lexicon (a large-scale termbase)   * Programmatic control of the Lilt CAT environment   * Translation memory synchronization  Requests and responses are in JSON format. The REST API only responds to HTTPS / SSL requests.  ## Authentication  Requests are authenticated via REST API key, which requires the Business plan.  Requests are authenticated using [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication). Add your REST API key as both the `username` and `password`.  For development, you may also pass the REST API key via the `key` query parameter. This is less secure than HTTP Basic Auth, and is not recommended for production use.  ## Quotas  Our services have a general quota of 4000 requests per minute. Should you hit the maximum requests per minute, you will need to wait 60 seconds before you can send another request. 
 *
 * The version of the OpenAPI document: v3.0
 * Contact: support@lilt.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.lilt.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * JobUpdateParameters
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-22T00:19:36.591Z[GMT]")
public class JobUpdateParameters {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DUE_DATE = "dueDate";
  @SerializedName(SERIALIZED_NAME_DUE_DATE)
  private Integer dueDate;

  /**
   * The processing status of the job. Provide one of the following integers to indicate the status.  Ok &#x3D; 0 Started &#x3D; 1 ExportError &#x3D; -2 
   */
  @JsonAdapter(IsProcessingEnum.Adapter.class)
  public enum IsProcessingEnum {
    _0("0"),
    
    _1("1"),
    
    _2("-2");

    private String value;

    IsProcessingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IsProcessingEnum fromValue(String value) {
      for (IsProcessingEnum b : IsProcessingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IsProcessingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IsProcessingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IsProcessingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IsProcessingEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_IS_PROCESSING = "isProcessing";
  @SerializedName(SERIALIZED_NAME_IS_PROCESSING)
  private IsProcessingEnum isProcessing;

  public static final String SERIALIZED_NAME_PROCESSING_ERROR_MSG = "processingErrorMsg";
  @SerializedName(SERIALIZED_NAME_PROCESSING_ERROR_MSG)
  private String processingErrorMsg;


  public JobUpdateParameters name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * A name for the Job.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "My new Job", value = "A name for the Job.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public JobUpdateParameters dueDate(Integer dueDate) {
    
    this.dueDate = dueDate;
    return this;
  }

   /**
   * An ISO string date.
   * @return dueDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An ISO string date.")

  public Integer getDueDate() {
    return dueDate;
  }


  public void setDueDate(Integer dueDate) {
    this.dueDate = dueDate;
  }


  public JobUpdateParameters isProcessing(IsProcessingEnum isProcessing) {
    
    this.isProcessing = isProcessing;
    return this;
  }

   /**
   * The processing status of the job. Provide one of the following integers to indicate the status.  Ok &#x3D; 0 Started &#x3D; 1 ExportError &#x3D; -2 
   * @return isProcessing
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "ExportError", value = "The processing status of the job. Provide one of the following integers to indicate the status.  Ok = 0 Started = 1 ExportError = -2 ")

  public IsProcessingEnum getIsProcessing() {
    return isProcessing;
  }


  public void setIsProcessing(IsProcessingEnum isProcessing) {
    this.isProcessing = isProcessing;
  }


  public JobUpdateParameters processingErrorMsg(String processingErrorMsg) {
    
    this.processingErrorMsg = processingErrorMsg;
    return this;
  }

   /**
   * The processing error message.
   * @return processingErrorMsg
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Authentication failed. Check your Contentful API Key.", value = "The processing error message.")

  public String getProcessingErrorMsg() {
    return processingErrorMsg;
  }


  public void setProcessingErrorMsg(String processingErrorMsg) {
    this.processingErrorMsg = processingErrorMsg;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobUpdateParameters jobUpdateParameters = (JobUpdateParameters) o;
    return Objects.equals(this.name, jobUpdateParameters.name) &&
        Objects.equals(this.dueDate, jobUpdateParameters.dueDate) &&
        Objects.equals(this.isProcessing, jobUpdateParameters.isProcessing) &&
        Objects.equals(this.processingErrorMsg, jobUpdateParameters.processingErrorMsg);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, dueDate, isProcessing, processingErrorMsg);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobUpdateParameters {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    dueDate: ").append(toIndentedString(dueDate)).append("\n");
    sb.append("    isProcessing: ").append(toIndentedString(isProcessing)).append("\n");
    sb.append("    processingErrorMsg: ").append(toIndentedString(processingErrorMsg)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

