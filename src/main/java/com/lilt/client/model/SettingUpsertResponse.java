/*
 * Lilt REST API
 * The Lilt REST API enables programmatic access to the full-range of Lilt backend services including:   * Training of and translating with interactive, adaptive machine translation   * Large-scale translation memory   * The Lexicon (a large-scale termbase)   * Programmatic control of the Lilt CAT environment   * Translation memory synchronization  Requests and responses are in JSON format. The REST API only responds to HTTPS / SSL requests. ## Authentication Requests are authenticated via REST API key, which requires the Business plan.  Requests are authenticated using [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication). Add your REST API key as both the `username` and `password`.  For development, you may also pass the REST API key via the `key` query parameter. This is less secure than HTTP Basic Auth, and is not recommended for production use. 
 *
 * The version of the OpenAPI document: v2.0
 * Contact: support@lilt.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.lilt.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.lilt.client.model.Setting;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Response from upserting a setting
 */
@ApiModel(description = "Response from upserting a setting")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-12-20T00:13:26.792Z[GMT]")
public class SettingUpsertResponse {
  public static final String SERIALIZED_NAME_SCOPED_SETTING = "scopedSetting";
  @SerializedName(SERIALIZED_NAME_SCOPED_SETTING)
  private Setting scopedSetting;

  public static final String SERIALIZED_NAME_ACTIVE_SETTINGS = "activeSettings";
  @SerializedName(SERIALIZED_NAME_ACTIVE_SETTINGS)
  private Map<String, Setting> activeSettings = null;


  public SettingUpsertResponse scopedSetting(Setting scopedSetting) {
    
    this.scopedSetting = scopedSetting;
    return this;
  }

   /**
   * Get scopedSetting
   * @return scopedSetting
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Setting getScopedSetting() {
    return scopedSetting;
  }


  public void setScopedSetting(Setting scopedSetting) {
    this.scopedSetting = scopedSetting;
  }


  public SettingUpsertResponse activeSettings(Map<String, Setting> activeSettings) {
    
    this.activeSettings = activeSettings;
    return this;
  }

  public SettingUpsertResponse putActiveSettingsItem(String key, Setting activeSettingsItem) {
    if (this.activeSettings == null) {
      this.activeSettings = new HashMap<String, Setting>();
    }
    this.activeSettings.put(key, activeSettingsItem);
    return this;
  }

   /**
   * A dictionary of configuration settings, keyed by setting name
   * @return activeSettings
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A dictionary of configuration settings, keyed by setting name")

  public Map<String, Setting> getActiveSettings() {
    return activeSettings;
  }


  public void setActiveSettings(Map<String, Setting> activeSettings) {
    this.activeSettings = activeSettings;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SettingUpsertResponse settingUpsertResponse = (SettingUpsertResponse) o;
    return Objects.equals(this.scopedSetting, settingUpsertResponse.scopedSetting) &&
        Objects.equals(this.activeSettings, settingUpsertResponse.activeSettings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(scopedSetting, activeSettings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SettingUpsertResponse {\n");
    sb.append("    scopedSetting: ").append(toIndentedString(scopedSetting)).append("\n");
    sb.append("    activeSettings: ").append(toIndentedString(activeSettings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

