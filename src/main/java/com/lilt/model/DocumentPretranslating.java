/*
 * Lilt REST API
 * The Lilt REST API enables programmatic access to the full-range of Lilt backend services including:   * Training of and translating with interactive, adaptive machine translation   * Large-scale translation memory   * The Lexicon (a large-scale termbase)   * Programmatic control of the Lilt CAT environment   * Translation memory synchronization  Requests and responses are in JSON format. The REST API only responds to HTTPS / SSL requests. ## Authentication Requests are authenticated via REST API key, which requires the Business plan.  Requests are authenticated using [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication). Add your REST API key as both the `username` and `password`.  For development, you may also pass the REST API key via the `key` query parameter. This is less secure than HTTP Basic Auth, and is not recommended for production use. 
 *
 * The version of the OpenAPI document: v2.0
 * Contact: support@lilt.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.lilt.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.lilt.model.DocumentPretranslatingStatus;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;

/**
 * Document object for which pretranslation was requested. 
 */
@ApiModel(description = "Document object for which pretranslation was requested. ")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-04-13T16:28:14.210947-07:00[America/Los_Angeles]")
public class DocumentPretranslating {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private BigDecimal id;

  public static final String SERIALIZED_NAME_IMPORT_IN_PROGRESS = "import_in_progress";
  @SerializedName(SERIALIZED_NAME_IMPORT_IN_PROGRESS)
  private Boolean importInProgress;

  public static final String SERIALIZED_NAME_IMPORT_SUCCEEDED = "import_succeeded";
  @SerializedName(SERIALIZED_NAME_IMPORT_SUCCEEDED)
  private Boolean importSucceeded;

  public static final String SERIALIZED_NAME_IMPORT_ERROR_MESSAGE = "import_error_message";
  @SerializedName(SERIALIZED_NAME_IMPORT_ERROR_MESSAGE)
  private String importErrorMessage;

  public static final String SERIALIZED_NAME_IS_PROCESSING = "is_processing";
  @SerializedName(SERIALIZED_NAME_IS_PROCESSING)
  private Boolean isProcessing;

  public static final String SERIALIZED_NAME_IS_PRETRANSLATING = "is_pretranslating";
  @SerializedName(SERIALIZED_NAME_IS_PRETRANSLATING)
  private Boolean isPretranslating;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private DocumentPretranslatingStatus status;


  public DocumentPretranslating id(BigDecimal id) {
    
    this.id = id;
    return this;
  }

   /**
   * A status object indicating the pretranslation status.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "123.0", value = "A status object indicating the pretranslation status.")

  public BigDecimal getId() {
    return id;
  }


  public void setId(BigDecimal id) {
    this.id = id;
  }


  public DocumentPretranslating importInProgress(Boolean importInProgress) {
    
    this.importInProgress = importInProgress;
    return this;
  }

   /**
   * Indicates that the document is being imported.
   * @return importInProgress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Indicates that the document is being imported.")

  public Boolean getImportInProgress() {
    return importInProgress;
  }


  public void setImportInProgress(Boolean importInProgress) {
    this.importInProgress = importInProgress;
  }


  public DocumentPretranslating importSucceeded(Boolean importSucceeded) {
    
    this.importSucceeded = importSucceeded;
    return this;
  }

   /**
   * Indicates that the document was successfully imported.
   * @return importSucceeded
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Indicates that the document was successfully imported.")

  public Boolean getImportSucceeded() {
    return importSucceeded;
  }


  public void setImportSucceeded(Boolean importSucceeded) {
    this.importSucceeded = importSucceeded;
  }


  public DocumentPretranslating importErrorMessage(String importErrorMessage) {
    
    this.importErrorMessage = importErrorMessage;
    return this;
  }

   /**
   * Indicates there was an error importing the document.
   * @return importErrorMessage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "", value = "Indicates there was an error importing the document.")

  public String getImportErrorMessage() {
    return importErrorMessage;
  }


  public void setImportErrorMessage(String importErrorMessage) {
    this.importErrorMessage = importErrorMessage;
  }


  public DocumentPretranslating isProcessing(Boolean isProcessing) {
    
    this.isProcessing = isProcessing;
    return this;
  }

   /**
   * Indicates the document is being processed.
   * @return isProcessing
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Indicates the document is being processed.")

  public Boolean getIsProcessing() {
    return isProcessing;
  }


  public void setIsProcessing(Boolean isProcessing) {
    this.isProcessing = isProcessing;
  }


  public DocumentPretranslating isPretranslating(Boolean isPretranslating) {
    
    this.isPretranslating = isPretranslating;
    return this;
  }

   /**
   * Indicates the document is being pretranslated.
   * @return isPretranslating
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Indicates the document is being pretranslated.")

  public Boolean getIsPretranslating() {
    return isPretranslating;
  }


  public void setIsPretranslating(Boolean isPretranslating) {
    this.isPretranslating = isPretranslating;
  }


  public DocumentPretranslating status(DocumentPretranslatingStatus status) {
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public DocumentPretranslatingStatus getStatus() {
    return status;
  }


  public void setStatus(DocumentPretranslatingStatus status) {
    this.status = status;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocumentPretranslating documentPretranslating = (DocumentPretranslating) o;
    return Objects.equals(this.id, documentPretranslating.id) &&
        Objects.equals(this.importInProgress, documentPretranslating.importInProgress) &&
        Objects.equals(this.importSucceeded, documentPretranslating.importSucceeded) &&
        Objects.equals(this.importErrorMessage, documentPretranslating.importErrorMessage) &&
        Objects.equals(this.isProcessing, documentPretranslating.isProcessing) &&
        Objects.equals(this.isPretranslating, documentPretranslating.isPretranslating) &&
        Objects.equals(this.status, documentPretranslating.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, importInProgress, importSucceeded, importErrorMessage, isProcessing, isPretranslating, status);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocumentPretranslating {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    importInProgress: ").append(toIndentedString(importInProgress)).append("\n");
    sb.append("    importSucceeded: ").append(toIndentedString(importSucceeded)).append("\n");
    sb.append("    importErrorMessage: ").append(toIndentedString(importErrorMessage)).append("\n");
    sb.append("    isProcessing: ").append(toIndentedString(isProcessing)).append("\n");
    sb.append("    isPretranslating: ").append(toIndentedString(isPretranslating)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

