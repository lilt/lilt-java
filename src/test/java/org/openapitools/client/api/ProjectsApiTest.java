/*
 * Lilt REST API
 * The Lilt REST API enables programmatic access to the full-range of Lilt backend services including:   * Training of and translating with interactive, adaptive machine translation   * Large-scale translation memory   * The Lexicon (a large-scale termbase)   * Programmatic control of the Lilt CAT environment   * Translation memory synchronization  Requests and responses are in JSON format. The REST API only responds to HTTPS / SSL requests. ## Authentication Requests are authenticated via REST API key, which requires the Business plan.  Requests are authenticated using [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication). Add your REST API key as both the `username` and `password`.  For development, you may also pass the REST API key via the `key` query parameter. This is less secure than HTTP Basic Auth, and is not recommended for production use. 
 *
 * The version of the OpenAPI document: v2.0
 * Contact: support@lilt.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.Project;
import org.openapitools.client.model.ProjectCreateParameters;
import org.openapitools.client.model.ProjectDeleteResponse;
import org.openapitools.client.model.ProjectQuote;
import org.openapitools.client.model.ProjectStatus;
import org.openapitools.client.model.ProjectUpdateResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
@Ignore
public class ProjectsApiTest {

    private final ProjectsApi api = new ProjectsApi();

    
    /**
     * Create a Project
     *
     * Create a Project. A Project is a collection of Documents.  A Project is associated with exactly one Memory.  Projects appear in the dashboard of the web app.  
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createProjectTest() throws ApiException {
        ProjectCreateParameters body = null;
        Project response = api.createProject(body);

        // TODO: test validations
    }
    
    /**
     * Delete a Project
     *
     * Delete a Project. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteProjectTest() throws ApiException {
        Integer id = null;
        ProjectDeleteResponse response = api.deleteProject(id);

        // TODO: test validations
    }
    
    /**
     * Retrieve a Project
     *
     * Retrieves one or more projects, including the documents associated with each project. Retrieving a project is the most efficient way to retrieve a single project or a list of all available projects.  To retrieve a specific project, specify the &#x60;id&#x60; request parameter. To retrieve all projects, omit the &#x60;id&#x60; request parameter. To limit the retrieved projects to those with a particular source language or target language, specify the corresponding ISO 639-1 language codes in the &#x60;srclang&#x60; and &#x60;trglang&#x60; request parameters, respectively.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProjectTest() throws ApiException {
        Integer id = null;
        String srclang = null;
        String trglang = null;
        Integer fromTime = null;
        Integer toTime = null;
        String state = null;
        Boolean archived = null;
        Integer connectorId = null;
        List<Project> response = api.getProject(id, srclang, trglang, fromTime, toTime, state, archived, connectorId);

        // TODO: test validations
    }
    
    /**
     * Retrieve Project report
     *
     * Get information about a project that can be used for quoting. This includes: * A translation memory leverage report * Word count * Segment count  
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProjectReportTest() throws ApiException {
        Integer id = null;
        ProjectQuote response = api.getProjectReport(id);

        // TODO: test validations
    }
    
    /**
     * Retrieve Project status
     *
     * Retrieve the status of a Project.  
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProjectStatusTest() throws ApiException {
        Integer id = null;
        ProjectStatus response = api.getProjectStatus(id);

        // TODO: test validations
    }
    
    /**
     * Update a Project
     *
     * Update a Project. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateProjectTest() throws ApiException {
        ProjectUpdateResponse body = null;
        Project response = api.updateProject(body);

        // TODO: test validations
    }
    
}
