/*
 * Lilt REST API
 * The Lilt REST API enables programmatic access to the full-range of Lilt backend services including:   * Training of and translating with interactive, adaptive machine translation   * Large-scale translation memory   * The Lexicon (a large-scale termbase)   * Programmatic control of the Lilt CAT environment   * Translation memory synchronization  Requests and responses are in JSON format. The REST API only responds to HTTPS / SSL requests. ## Authentication Requests are authenticated via REST API key, which requires the Business plan.  Requests are authenticated using [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication). Add your REST API key as both the `username` and `password`.  For development, you may also pass the REST API key via the `key` query parameter. This is less secure than HTTP Basic Auth, and is not recommended for production use. 
 *
 * The version of the OpenAPI document: v2.0
 * Contact: support@lilt.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.lilt.client.api;

import com.lilt.client.ApiException;
import com.lilt.client.model.Error;
import java.io.File;
import com.lilt.client.model.Memory;
import com.lilt.client.model.MemoryCreateParameters;
import com.lilt.client.model.MemoryDeleteResponse;
import com.lilt.client.model.MemoryImportResponse;
import com.lilt.client.model.MemoryInsertResponse;
import com.lilt.client.model.MemoryUpdateParameters;
import com.lilt.client.model.MemoryUpdateResponse;
import com.lilt.client.model.TranslationMemoryEntry;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MemoriesApi
 */
@Ignore
public class MemoriesApiTest {

    private final MemoriesApi api = new MemoriesApi();

    
    /**
     * Create a Memory
     *
     * Create a new Memory. A Memory is a container that collects source/target sentences for a specific language pair (e.g., English&gt;French). The data in the Memory is used to train the MT system, populate the TM, and update the lexicon. Memories are private to your account - the data is not shared across users - unless you explicitly share a Memory with your team (via web app only).  &lt;a href&#x3D;\&quot;https://lilt.com/kb/memory/memories\&quot; target&#x3D;_blank&gt;Refer to our KB&lt;/a&gt; for a more detailed description.  
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createMemoryTest() throws ApiException {
        MemoryCreateParameters body = null;
        Memory response = api.createMemory(body);

        // TODO: test validations
    }
    
    /**
     * Delete a Memory
     *
     * Delete a Memory. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteMemoryTest() throws ApiException {
        Integer id = null;
        MemoryDeleteResponse response = api.deleteMemory(id);

        // TODO: test validations
    }
    
    /**
     * Retrieve a Memory
     *
     * Retrieve a Memory. If you cannot access the Memory (401 error) please check permissions (e.g. in case you created the Memory via the web app with a different account you may have to explicitly share that Memory).  
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMemoryTest() throws ApiException {
        Integer id = null;
        List<Memory> response = api.getMemory(id);

        // TODO: test validations
    }
    
    /**
     * File import for a Memory
     *
     * Imports common translation memory or termbase file formats to a specific Lilt memory. Currently supported file formats are &#x60;*.tmx&#x60;, &#x60;*.sdltm&#x60; and &#x60;*.tmq&#x60; for TM data; &#x60;*.csv&#x60; and &#x60;*.tbx&#x60; for termbase data. Request parameters should be passed as JSON object with the header field &#x60;LILT-API&#x60;.  Example cURL command to upload a translation memory file named &#x60;my_memory.sdltm&#x60; in the current working directory: &#x60;&#x60;&#x60;   curl -X POST https://lilt.com/2/memories/import?key&#x3D;API_KEY \\     --header \&quot;LILT-API: {\\\&quot;name\\\&quot;: \\\&quot;my_memory.sdltm\\\&quot;,\\\&quot;memory_id\\\&quot;: 42}\&quot; \\     --header \&quot;Content-Type: application/octet-stream\&quot; \\     --data-binary @my_memory.sdltm &#x60;&#x60;&#x60;  
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importMemoryFileTest() throws ApiException {
        Integer memoryId = null;
        String name = null;
        String body = null;
        MemoryImportResponse response = api.importMemoryFile(memoryId, name, body);

        // TODO: test validations
    }
    
    /**
     * Query a Memory
     *
     * Perform a translation memory query.  
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void queryMemoryTest() throws ApiException {
        Integer id = null;
        String query = null;
        Integer n = null;
        List<TranslationMemoryEntry> response = api.queryMemory(id, query, n);

        // TODO: test validations
    }
    
    /**
     * Delete-sync for a Memory
     *
     * Deletes segments in the Memory matching the &#x60;from_time&#x60;, &#x60;to_time&#x60; and &#x60;when&#x60; parameters.  Example CURL command: &#x60;&#x60;&#x60;   curl -X DELETE https://lilt.com/2/memories/sync?key&#x3D;API_KEY&amp;id&#x3D;42&amp;from_time&#x3D;1491048000&amp;to_time&#x3D;1491049800&amp;when&#x3D;created &#x60;&#x60;&#x60;  
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void syncDeleteMemoryTest() throws ApiException {
        Integer id = null;
        Integer fromTime = null;
        Integer toTime = null;
        String when = null;
        MemoryInsertResponse response = api.syncDeleteMemory(id, fromTime, toTime, when);

        // TODO: test validations
    }
    
    /**
     * Get-sync for a Memory
     *
     * Get all or part of a memory in TMX 1.4b format. If the &#x60;from_time&#x60; and/or &#x60;to_time&#x60; are omitted, then all segments are returned. The parameter &#x60;when&#x60; specifies on which date field &#x60;from_time&#x60; and &#x60;to_time&#x60; are matched. Possible values are &#x60;created&#x60; (when the segment was originally created in the memory), &#x60;updated&#x60; (when the segment was lastly updated), and &#x60;deleted&#x60; (when the segment was deleted).  Example CURL command: &#x60;&#x60;&#x60;   curl -X GET https://lilt.com/2/memories/sync?key&#x3D;API_KEY&amp;id&#x3D;42 -o from_lilt.tmx &#x60;&#x60;&#x60;  
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void syncDownMemoryTest() throws ApiException {
        Integer id = null;
        Integer fromTime = null;
        Integer toTime = null;
        String when = null;
        File response = api.syncDownMemory(id, fromTime, toTime, when);

        // TODO: test validations
    }
    
    /**
     * Insert-sync for a Memory
     *
     * Inserts a TM in TMX 1.4b format into the Memory. Request parameters should be passed as JSON object with the header field &#x60;LILT-API&#x60;.  Example CURL command: &#x60;&#x60;&#x60;   curl -X POST https://lilt.com/2/memories/sync?key&#x3D;API_KEY \\     --header \&quot;LILT-API: {\\\&quot;name\\\&quot;: \\\&quot;my_memory.tmx\\\&quot;,\\\&quot;id\\\&quot;: 42}\&quot; \\     --header \&quot;Content-Type: application/octet-stream\&quot; \\     --data-binary @my_memory.tmx &#x60;&#x60;&#x60;  
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void syncInsertMemoryTest() throws ApiException {
        Integer id = null;
        String body = null;
        String name = null;
        MemoryInsertResponse response = api.syncInsertMemory(id, body, name);

        // TODO: test validations
    }
    
    /**
     * Update-sync for a Memory
     *
     * Updates the Memory with given TMX file. Request parameters should be passed as JSON object with the header field &#x60;LILT-API&#x60;. The number of segments returned by the &#x60;from_time&#x60;, &#x60;to_time&#x60;, &#x60;when&#x60; parameters and the number of segments in the TMX file need to be identical.  Example CURL command: &#x60;&#x60;&#x60;   curl -X PUT https://lilt.com/2/memories/sync?key&#x3D;API_KEY \\     --header \&quot;LILT-API: {\\\&quot;name\\\&quot;: \\\&quot;my_memory.tmx\\\&quot;, \\\&quot;id\\\&quot;: 42, \\\&quot;from_time\\\&quot;: 1491048000, \\\&quot;to_time\\\&quot;: 1491049800, \&quot;when\&quot;: \&quot;Updated\&quot;}\&quot; \\     --header \&quot;Content-Type: application/octet-stream\&quot; \\     --data-binary @my_memory.tmx &#x60;&#x60;&#x60;  
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void syncUpdateMemoryTest() throws ApiException {
        Integer id = null;
        String body = null;
        Integer fromTime = null;
        Integer toTime = null;
        String when = null;
        MemoryUpdateResponse response = api.syncUpdateMemory(id, body, fromTime, toTime, when);

        // TODO: test validations
    }
    
    /**
     * Update the name of a Memory
     *
     * Update a Memory. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateMemoryTest() throws ApiException {
        MemoryUpdateParameters body = null;
        Memory response = api.updateMemory(body);

        // TODO: test validations
    }
    
}
