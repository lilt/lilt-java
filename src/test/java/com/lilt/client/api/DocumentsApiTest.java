/*
 * Lilt REST API
 * The Lilt REST API enables programmatic access to the full-range of Lilt backend services including:   * Training of and translating with interactive, adaptive machine translation   * Large-scale translation memory   * The Lexicon (a large-scale termbase)   * Programmatic control of the Lilt CAT environment   * Translation memory synchronization  Requests and responses are in JSON format. The REST API only responds to HTTPS / SSL requests. ## Authentication Requests are authenticated via REST API key, which requires the Business plan.  Requests are authenticated using [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication). Add your REST API key as both the `username` and `password`.  For development, you may also pass the REST API key via the `key` query parameter. This is less secure than HTTP Basic Auth, and is not recommended for production use. 
 *
 * The version of the OpenAPI document: v2.0
 * Contact: support@lilt.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.lilt.client.api;

import com.lilt.client.ApiException;
import com.lilt.client.model.DocumentAssignmentParameters;
import com.lilt.client.model.DocumentAssignmentResponse;
import com.lilt.client.model.DocumentDeleteResponse;
import com.lilt.client.model.DocumentParameters;
import com.lilt.client.model.DocumentPretranslateParameters;
import com.lilt.client.model.DocumentPretranslateResponse;
import com.lilt.client.model.DocumentUpdateParameters;
import com.lilt.client.model.DocumentWithSegments;
import com.lilt.client.model.Error;
import java.io.File;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DocumentsApi
 */
@Ignore
public class DocumentsApiTest {

    private final DocumentsApi api = new DocumentsApi();

    
    /**
     * Assign a Document
     *
     * Assign and unassign a Document for translation and/or review.  
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void assignDocumentTest() throws ApiException {
        DocumentAssignmentParameters body = null;
        DocumentAssignmentResponse response = api.assignDocument(body);

        // TODO: test validations
    }
    
    /**
     * Create a Document
     *
     * Create a new Document. A Document is a collection of one or more Segments. Documents are nested inside of Projects, and appear in the Project details view in the web app. Document-level relationships between Segments are considered by the machine translation system during adaptation. If there is no inherent document structure in your data, you still might consider grouping related Segments into Documents to improve translation quality. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDocumentTest() throws ApiException {
        DocumentParameters body = null;
        DocumentWithSegments response = api.createDocument(body);

        // TODO: test validations
    }
    
    /**
     * Delete a Document
     *
     * Delete a Document. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDocumentTest() throws ApiException {
        Integer id = null;
        DocumentDeleteResponse response = api.deleteDocument(id);

        // TODO: test validations
    }
    
    /**
     * Download a File
     *
     * Export a Document that has been translated in the Lilt web application. Any Document can be downloaded in XLIFF 1.2 format, or can be retrieved in its original uploaded format by setting &#x60;is_xliff&#x3D;false&#x60;. This endpoint will fail if either (a) export or (b) pre-translation operations are in-progress. The status of those operations can be determined by retrieving the Document resource. Example CURL command: &#x60;&#x60;&#x60;   curl -X GET https://lilt.com/2/documents/files?key&#x3D;API_KEY&amp;id&#x3D;274 -o from_lilt.xliff &#x60;&#x60;&#x60;  
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadFileTest() throws ApiException {
        Integer id = null;
        Boolean isXliff = null;
        File response = api.downloadFile(id, isXliff);

        // TODO: test validations
    }
    
    /**
     * Retrieve a Document
     *
     * List a Document.  The listing will include the pretranslation status for the document. When pretranslation is in progress for a document, the &#x60;GET /documents&#x60; endpoint&#39;s response will include &#x60;is_pretranslating &#x3D; true&#x60; as well as a more detailed status property &#x60;status.pretranslation&#x60; one of &#x60;idle&#x60;, &#x60;pending&#x60;, or &#x60;running&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDocumentTest() throws ApiException {
        Integer id = null;
        Boolean withSegments = null;
        DocumentWithSegments response = api.getDocument(id, withSegments);

        // TODO: test validations
    }
    
    /**
     * Pretranslate a Document
     *
     * Initiate pretranslation of a list of Documents. This request will mark document(s) as being pretranslated. Pretranslation in this context is: - Applying and confirming exact TM matches based on the Memory of the Project; - Translating all other segments via MT without confirming them.  Example cURL command: &#x60;&#x60;&#x60; curl -X POST https://lilt.com/2/documents/pretranslate?key&#x3D;API_KEY -d {\&quot;id\&quot;: [123]} -H \&quot;Content-Type: application/json\&quot; &#x60;&#x60;&#x60;  Document translation is an asynchronous process that, in effect, is performed in the background.  To check the status of pretranslation for a document, use the &#x60;GET /documents&#x60; endpoint. When pretranslation is in progress for a document, the &#x60;GET /documents&#x60; endpoint&#39;s response will include &#x60;is_pretranslating &#x3D; true&#x60; as well as a more detailed status property &#x60;status.pretranslation&#x60; one of &#x60;idle&#x60;, &#x60;pending&#x60;, or &#x60;running&#x60;.  Once pretranslation is finished, the document can be downloaded via &#x60;GET /documents/files&#x60;. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pretranslateDocumentsTest() throws ApiException {
        DocumentPretranslateParameters body = null;
        Boolean autoAccept = null;
        Boolean caseSensitive = null;
        Boolean attributeToCreator = null;
        String mode = null;
        DocumentPretranslateResponse response = api.pretranslateDocuments(body, autoAccept, caseSensitive, attributeToCreator, mode);

        // TODO: test validations
    }
    
    /**
     * Update a Document
     *
     * Update a Document. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateDocumentTest() throws ApiException {
        DocumentUpdateParameters body = null;
        DocumentWithSegments response = api.updateDocument(body);

        // TODO: test validations
    }
    
    /**
     * Upload a File
     *
     * Create a Document from a file in any of the formats [documented in our knowledge base](https://support.lilt.com/hc/en-us/articles/360020816253-File-Formats). Request parameters should be passed as JSON object with the header  field &#x60;LILT-API&#x60;. Example CURL command: &#x60;&#x60;&#x60;   curl -X POST https://lilt.com/2/documents/files?key&#x3D;API_KEY \\   --header \&quot;LILT-API: {\\\&quot;name\\\&quot;: \\\&quot;introduction.xliff\\\&quot;,\\\&quot;pretranslate\\\&quot;: \\\&quot;tm+mt\\\&quot;,\\\&quot;project_id\\\&quot;: 9}\&quot; \\   --header \&quot;Content-Type: application/octet-stream\&quot; \\   --data-binary @Introduction.xliff &#x60;&#x60;&#x60;  
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uploadDocumentFileTest() throws ApiException {
        String name = null;
        Integer projectId = null;
        String body = null;
        String pretranslate = null;
        Boolean autoAccept = null;
        Integer configId = null;
        DocumentWithSegments response = api.uploadDocumentFile(name, projectId, body, pretranslate, autoAccept, configId);

        // TODO: test validations
    }
    
}
