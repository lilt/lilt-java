/*
 * Lilt REST API
 * The Lilt REST API enables programmatic access to the full-range of Lilt backend services including:   * Training of and translating with interactive, adaptive machine translation   * Large-scale translation memory   * The Lexicon (a large-scale termbase)   * Programmatic control of the Lilt CAT environment   * Translation memory synchronization  Requests and responses are in JSON format. The REST API only responds to HTTPS / SSL requests. ## Authentication Requests are authenticated via REST API key, which requires the Business plan.  Requests are authenticated using [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication). Add your REST API key as both the `username` and `password`.  For development, you may also pass the REST API key via the `key` query parameter. This is less secure than HTTP Basic Auth, and is not recommended for production use. 
 *
 * The version of the OpenAPI document: v2.0
 * Contact: support@lilt.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.lilt.client.api;

import com.lilt.client.ApiException;
import com.lilt.client.model.Connector;
import com.lilt.client.model.Connector1;
import com.lilt.client.model.ConnectorDeleteResponse;
import com.lilt.client.model.Error;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ConnectorsApi
 */
@Ignore
public class ConnectorsApiTest {

    private final ConnectorsApi api = new ConnectorsApi();

    
    /**
     * Upload a Connector
     *
     * Create a new connector linked to a supported external cms. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createConnectorTest() throws ApiException {
        Connector1 body = null;
        Connector response = api.createConnector(body);

        // TODO: test validations
    }
    
    /**
     * Delete a Connector
     *
     * Delete a Connector.  Example CURL command: &#x60;&#x60;&#x60;   curl -X DELETE https://lilt.com/2/connectors?key&#x3D;API_KEY&amp;id&#x3D;123 &#x60;&#x60;&#x60;  
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteConnectorTest() throws ApiException {
        Integer id = null;
        ConnectorDeleteResponse response = api.deleteConnector(id);

        // TODO: test validations
    }
    
    /**
     * Retrieve a Connector
     *
     * Retrieves one or more connectors available to your user. Connectors are not associated with a project or a memory.  To retrieve a specific connector, specify the &lt;strong&gt;id&lt;/strong&gt; request parameter. To retrieve all connectors, omit the &lt;strong&gt;id&lt;/strong&gt; request parameter.  Example cURL command: &#x60;&#x60;&#x60;  curl -X GET https://lilt.com/2/connectors?key&#x3D;API_KEY&amp;id&#x3D;274&#x60;&#x60;&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getConnectorsTest() throws ApiException {
        Integer id = null;
        Connector response = api.getConnectors(id);

        // TODO: test validations
    }
    
    /**
     * Upload a Connector
     *
     * Create a new connector linked to a supported external content source. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateConnectorTest() throws ApiException {
        Connector body = null;
        Connector response = api.updateConnector(body);

        // TODO: test validations
    }
    
}
