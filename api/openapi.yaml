openapi: 3.0.1
info:
  contact:
    email: support@lilt.com
    name: Lilt REST API Support
    url: https://lilt.com/docs/api
  description: |
    The Lilt REST API enables programmatic access to the full-range of Lilt backend services including:
      * Training of and translating with interactive, adaptive machine translation
      * Large-scale translation memory
      * The Lexicon (a large-scale termbase)
      * Programmatic control of the Lilt CAT environment
      * Translation memory synchronization

    Requests and responses are in JSON format. The REST API only responds to HTTPS / SSL requests.
    ## Authentication
    Requests are authenticated via REST API key, which requires the Business plan.

    Requests are authenticated using [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication). Add your REST API key as both the `username` and `password`.

    For development, you may also pass the REST API key via the `key` query parameter. This is less secure than HTTP Basic Auth, and is not recommended for production use.
  title: Lilt REST API
  version: v2.0
servers:
- url: https://lilt.com/2
security:
- ApiKeyAuth: []
- BasicAuth: []
paths:
  /:
    get:
      description: |+
        This resource does not have any attributes. It lists the name of the
        REST API.

        This endpoint can be used to verify REST API keys and to check the
        availability of the REST API.

      operationId: root
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiRoot'
          description: A status object.
        default:
          content:
            application/json:
              schema:
                $ref: ./definitions/Error.yaml#/Error
          description: Unexpected error
      summary: Retrieve the REST API root
      tags:
      - Root
      x-accepts: application/json
  /files:
    delete:
      description: |+
        Delete a File.

        Example CURL command:
        ```
          curl -X DELETE https://lilt.com/2/files?key=API_KEY&id=123 ```

      operationId: deleteFile
      parameters:
      - description: A unique File identifier.
        in: query
        name: id
        required: true
        schema:
          type: integer
      responses:
        "204":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileDeleteResponse'
          description: A status object.
        default:
          content:
            application/json:
              schema:
                $ref: ./definitions/Error.yaml#/Error
          description: Unexpected error
      summary: Delete a File
      tags:
      - Files
      x-accepts: application/json
    get:
      description: |-
        Retrieves one or more files available to your user. Files are not associated with a project or a memory. They are unprocessed and can be used later in the project/document creation workflow step.

        To retrieve a specific file, specify the <strong>id</strong> request parameter. To retrieve all files, omit the <strong>id</strong> request parameter.

        Example CURL command:
        ```
         curl -X GET https://lilt.com/2/files?key=API_KEY&id=274```
      operationId: getFiles
      parameters:
      - description: A unique File identifier.
        in: query
        name: id
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/object-definitions/SourceFile'
                title: FilesList
                type: array
          description: A list of files.
        "403":
          content: {}
          description: Unauthorized.
        "410":
          content: {}
          description: File deleted.
        default:
          content:
            application/json:
              schema:
                $ref: ./definitions/Error.yaml
          description: Unexpected error.
      summary: Retrieve a File
      tags:
      - Files
      x-accepts: application/json
    post:
      description: |+
        Upload a File in any of the formats [documented in our knowledge
        base](https://support.lilt.com/hc/en-us/articles/360020816253-File-Formats).
        Request parameters should be passed in as query string parameters.

        Example CURL command:
        ```
          curl -X POST https://lilt.com/2/files?key=API_KEY&name=en_US.json \
          --header "Content-Type: application/octet-stream" \
          --data-binary @en_US.json
        ```
        Calls to GET /files are used to monitor the language detection results. The API response will be augmented to include detected language and confidence score.

        The language detection will complete asynchronously. Prior to completion, the `detected_lang` value will be `zxx`, the reserved ISO 639-2 code for "No linguistic content/not applicable".

        If the language can not be determined, or the detection process fails, the `detected_lang` field will return `und`, the reserved ISO 639-2 code for undetermined language, and the `detected_lang_confidence` score will be `0`.

      operationId: uploadFile
      parameters:
      - description: A file name.
        in: query
        name: name
        required: true
        schema:
          type: string
      - description: A hash value to associate with the file. The MD5 hash of the
          body contents will be used by default if a value isn't provided.
        in: query
        name: file_hash
        schema:
          type: string
      - description: Flag indicating whether to perform language detection on the
          uploaded file. Default is false.
        in: query
        name: langId
        schema:
          type: boolean
      - description: The project to associate the uploaded file with.
        in: query
        name: project_id
        schema:
          type: integer
      - description: The category of the file. The options are `REFERENCE`, or `API`.
          The default is API. Files with the `REFERENCE` category will be displayed
          as reference material.
        in: query
        name: category
        schema:
          type: string
      - description: Comma-separated list of labels to add to the uploaded document.
        in: query
        name: labels
        schema:
          type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              example: |-
                <?xml version="1.0" encoding="UTF-8" standalone="no"?>
                <xliff xmlns="urn:oasis:names:tc:xliff:document:1.2">
                ...
                </xliff>
              format: binary
              title: FileUploadBody
              type: string
        description: The file contents to be uploaded. The entire POST body will be
          treated as the file.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/object-definitions/SourceFile'
          description: A SourceFile object.
        default:
          content:
            application/json:
              schema:
                $ref: ./definitions/Error.yaml#/Error
          description: Unexpected error
      summary: Upload a File
      tags:
      - Files
      x-codegen-request-body-name: body
      x-contentType: application/octet-stream
      x-accepts: application/json
  /comments:
    delete:
      description: |
        Delete a Comment.

        Example CURL command:
        ```
          curl -X DELETE https://lilt.com/2/comments?key=API_KEY&comment_id=123
        ```
      operationId: deleteComment
      parameters:
      - description: A unique Comment identifier.
        in: query
        name: comment_id
        required: true
        schema:
          type: integer
      responses:
        "204":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentDeleteResponse'
          description: A status object.
        default:
          content:
            application/json:
              schema:
                $ref: ./definitions/Error.yaml#/Error
          description: Unexpected error
      summary: Delete a Comment
      tags:
      - Comments
      x-accepts: application/json
    get:
      description: |
        Retrieves all comments associated with a specified document, grouped by their Segment's ID.

        To retrieve a document's comments, specify the <strong>document_id</strong> request parameter.

        Example CURL command:
        ```
          curl -X GET https://lilt.com/2/comments?key=API_KEY&document_id=123
        ```
      operationId: getDocumentComments
      parameters:
      - description: A unique document identifier.
        in: query
        name: document_id
        required: true
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/object-definitions/DocumentComments'
          description: An object containing lists of comments identified by the id
            of the segment to which they belong.
        "403":
          content: {}
          description: Unauthorized.
        "410":
          content: {}
          description: Comment deleted.
        default:
          content:
            application/json:
              schema:
                $ref: ./definitions/Error.yaml#/Error
          description: Unexpected error.
      summary: Retrieve a document's comments by segment
      tags:
      - Comments
      x-accepts: application/json
    post:
      description: Create a new comment for the specified Segment ID.
      operationId: createComment
      parameters:
      - description: A unique document identifier.
        in: query
        name: document_id
        required: true
        schema:
          type: integer
      - description: A unique segment identifier.
        in: query
        name: segment_id
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/object-definitions/CommentBody'
        description: The comment being created
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/object-definitions/Comment'
          description: A Comment object.
        default:
          content:
            application/json:
              schema:
                $ref: ./definitions/Error.yaml#/Error
          description: Unexpected error
      summary: Create a new comment
      tags:
      - Comments
      x-codegen-request-body-name: body
      x-contentType: application/json
      x-accepts: application/json
    put:
      description: Update an existing comment.
      operationId: updateComment
      parameters:
      - description: A unique comment identifier.
        in: query
        name: comment_id
        required: true
        schema:
          type: integer
      - description: A unique document identifier.
        in: query
        name: document_id
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/object-definitions/CommentBody'
        description: The comment being updated.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/object-definitions/Comment'
          description: A Comment object.
        default:
          content:
            application/json:
              schema:
                $ref: ./definitions/Error.yaml#/Error
          description: Unexpected error
      summary: Update an existing comment
      tags:
      - Comments
      x-codegen-request-body-name: body
      x-contentType: application/json
      x-accepts: application/json
  /connectors:
    delete:
      description: |+
        Delete a Connector.

        Example CURL command:
        ```
          curl -X DELETE https://lilt.com/2/connectors?key=API_KEY&id=123 ```

      operationId: deleteConnector
      parameters:
      - description: A unique Connector identifier.
        in: query
        name: id
        required: true
        schema:
          type: integer
      responses:
        "204":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorDeleteResponse'
          description: A status object.
        default:
          content:
            application/json:
              schema:
                $ref: ./definitions/Error.yaml#/Error
          description: Unexpected error
      summary: Delete a Connector
      tags:
      - Connectors
      x-accepts: application/json
    get:
      description: |-
        Retrieves one or more connectors available to your user. Connectors are not associated with a project or a memory.

        To retrieve a specific connector, specify the <strong>id</strong> request parameter. To retrieve all connectors, omit the <strong>id</strong> request parameter.

        Example CURL command:
        ```
         curl -X GET https://lilt.com/2/connectors?key=API_KEY&id=274```
      operationId: getConnectors
      parameters:
      - description: A unique Connector identifier.
        in: query
        name: id
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/object-definitions/Connector'
                title: ConnectorsList
                type: array
          description: A list of Connectors.
        "403":
          content: {}
          description: Unauthorized.
        "410":
          content: {}
          description: Connector deleted.
        default:
          content:
            application/json:
              schema:
                $ref: ./definitions/Error.yaml#/Error
          description: Unexpected error.
      summary: Retrieve a Connector
      tags:
      - Connectors
      x-accepts: application/json
    post:
      description: |
        Create a new connector linked to a supported external cms.
      operationId: createConnector
      requestBody:
        $ref: '#/components/requestBodies/connector'
        content:
          application/json:
            schema:
              properties:
                name:
                  description: Name of connector.
                  type: string
                args:
                  description: Connector parameters.
                  properties: {}
                  type: object
                schedule:
                  description: Cron string
                  example: 0 0 * * *
                  type: string
              title: connector
              type: object
        description: Connector arguments.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/object-definitions/Connector'
          description: A Connector object.
        default:
          content:
            application/json:
              schema:
                $ref: ./definitions/Error.yaml#/Error
          description: Unexpected error
      summary: Upload a Connector
      tags:
      - Connectors
      x-codegen-request-body-name: body
      x-contentType: application/json
      x-accepts: application/json
    put:
      description: |
        Create a new connector linked to a supported external content source.
      operationId: updateConnector
      requestBody:
        $ref: '#/components/requestBodies/ConnectorArguments'
        content:
          application/json:
            schema:
              example:
                args: '{}'
                schedule: 0 0 * * *
                name: zendesk
                id: 46530
              properties:
                id:
                  description: A unique Connector identifier.
                  example: 46530
                  type: integer
                name:
                  description: Name of connector.
                  example: zendesk
                  type: string
                args:
                  description: Connector parameters.
                  properties: {}
                  type: object
                schedule:
                  description: Cron string
                  example: 0 0 * * *
                  type: string
              title: ConnectorArguments
              type: object
        description: Connector arguments.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/object-definitions/Connector'
          description: A Connector object.
        default:
          content:
            application/json:
              schema:
                $ref: ./definitions/Error.yaml#/Error
          description: Unexpected error
      summary: Upload a Connector
      tags:
      - Connectors
      x-codegen-request-body-name: body
      x-contentType: application/json
      x-accepts: application/json
  /connectors/sync:
    post:
      description: |
        Request an import job for the given connector ID. This will check the
        target system for new content to pull into Lilt.

        Example CURL command:
        ```
         curl -X GET https://lilt.com/2/connectors/sync?key=API_KEY&id=128
        ```
      operationId: syncConnector
      parameters:
      - description: A unique Connector identifier.
        in: query
        name: id
        required: true
        schema:
          type: integer
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/object-definitions/ConnectorJob'
          description: A Connector Job object.
        default:
          content:
            application/json:
              schema:
                $ref: ./definitions/Error.yaml#/Error
          description: Unexpected error
      summary: Sync a Connector
      tags:
      - Connectors
      x-accepts: application/json
  /connectors/jobs:
    get:
      description: |
        Retrieves a connector job available to your user. Use this to check the
        status of jobs started by the `/connectors/sync` and
        `/connectors/jobs/deliver` endpoints.

        Example CURL command:
        ```
         curl -X GET https://lilt.com/2/connectors/jobs?key=API_KEY&id=9274
        ```
      operationId: getConnectorJobs
      parameters:
      - description: A unique Connector Job identifier.
        in: query
        name: id
        required: true
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/object-definitions/ConnectorJob'
                title: ConnectorJobsList
                type: array
          description: A list of Connector Jobs.
        default:
          content:
            application/json:
              schema:
                $ref: ./definitions/Error.yaml#/Error
          description: Unexpected error
      summary: Retrieve a Connector Job
      tags:
      - Connectors
      x-accepts: application/json
  /connectors/jobs/deliver:
    post:
      description: |
        Request an export job for the given connector job ID. This will check
        Lilt for completed projects that are associated with this job and
        deliver them to the target system.

        Example CURL command:
        ```
         curl -X POST https://lilt.com/2/connectors/jobs/deliver?key=API_KEY&id=9274
        ```
      operationId: exportConnectorJob
      parameters:
      - description: A unique Connector Job identifier.
        in: query
        name: id
        required: true
        schema:
          type: integer
      responses:
        "200":
          content: {}
          description: A success status code.
        default:
          content:
            application/json:
              schema:
                $ref: ./definitions/Error.yaml#/Error
          description: Unexpected error
      summary: Deliver a Connector Job
      tags:
      - Connectors
      x-accepts: application/json
  /documents:
    delete:
      description: |
        Delete a Document.
      operationId: deleteDocument
      parameters:
      - description: A unique Document identifier.
        in: query
        name: id
        required: true
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentDeleteResponse'
          description: A status object.
        default:
          content:
            application/json:
              schema:
                $ref: ./definitions/Error.yaml#/Error
          description: Unexpected error
      summary: Delete a Document
      tags:
      - Documents
      x-accepts: application/json
    get:
      description: |-
        List a Document.

        The listing will include the pretranslation status for the document. When pretranslation is in progress for a document, the `GET /documents` endpoint's response will include `is_pretranslating = true` as well as a more detailed status property `status.pretranslation` one of `idle`, `pending`, or `running`.
      operationId: getDocument
      parameters:
      - description: A unique Document identifier.
        in: query
        name: id
        required: true
        schema:
          type: integer
      - description: Flag indicating whether full segment information should be returned.
        in: query
        name: with_segments
        schema:
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/object-definitions/DocumentWithSegments'
          description: A Document object.
        default:
          content:
            application/json:
              schema:
                $ref: ./definitions/Error.yaml#/Error
          description: Unexpected error
      summary: Retrieve a Document
      tags:
      - Documents
      x-accepts: application/json
    post:
      description: |
        Create a new Document. A Document is a collection of one or more Segments.
        Documents are nested inside of Projects, and appear in the Project details view in the web app.
        Document-level relationships between Segments are considered by the machine translation system during adaptation. If there is no inherent document structure in your data, you still might consider grouping related Segments into Documents to improve translation quality.
      operationId: createDocument
      requestBody:
        $ref: '#/components/requestBodies/DocumentParameters'
        content:
          application/json:
            schema:
              example:
                project_id: 23618
                name: Introduction.xliff
              properties:
                name:
                  description: The document name.
                  example: Introduction.xliff
                  type: string
                project_id:
                  description: A unique Project identifier.
                  example: 23618
                  type: integer
              required:
              - name
              - project_id
              title: DocumentParameters
              type: object
        description: The Document resource to create.
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/object-definitions/DocumentWithSegments'
          description: A Document object.
        default:
          content:
            application/json:
              schema:
                $ref: ./definitions/Error.yaml#/Error
          description: Unexpected error
      summary: Create a Document
      tags:
      - Documents
      x-codegen-request-body-name: body
      x-contentType: application/json
      x-accepts: application/json
    put:
      description: |
        Update a Document.
      operationId: updateDocument
      requestBody:
        $ref: '#/components/requestBodies/DocumentUpdateParameters'
        content:
          application/json:
            schema:
              example:
                name: Introduction to our App
                id: 46530
              properties:
                id:
                  description: A unique Document identifier.
                  example: 46530
                  type: integer
                name:
                  description: The Document name.
                  example: Introduction to our App
                  type: string
              required:
              - id
              - name
              title: DocumentUpdateParameters
              type: object
        description: The Document resource to update.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/object-definitions/DocumentWithSegments'
          description: A Document object.
        default:
          content:
            application/json:
              schema:
                $ref: ./definitions/Error.yaml#/Error
          description: Unexpected error
      summary: Update a Document
      tags:
      - Documents
      x-codegen-request-body-name: body
      x-contentType: application/json
      x-accepts: application/json
  /documents/share:
    put:
      description: |+
        Assign and unassign a Document for translation and/or review.

      operationId: assignDocument
      requestBody:
        $ref: '#/components/requestBodies/DocumentAssignmentParameters'
        content:
          application/json:
            schema:
              example:
                is_reviewer: false
                due_date: 2000-01-23T04:56:07.000+00:00
                is_translator: true
                id: 46530
                email: user@email.com
              properties:
                id:
                  description: A unique Document identifier.
                  example: 46530
                  type: integer
                email:
                  description: An email address.
                  example: user@email.com
                  type: string
                is_translator:
                  description: If true, assign for translating. If false, then unassign.
                  example: true
                  type: boolean
                is_reviewer:
                  description: If true, assign for reviewing. If false, then unassign.
                  example: false
                  type: boolean
                due_date:
                  description: Due date for translation or review (set based on `is_translator`
                    and `is_reviewer` flags).
                  format: date-time
                  type: string
              required:
              - email
              - id
              title: DocumentAssignmentParameters
              type: object
        description: Attributes of the Document resource to assign.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentAssignmentResponse'
          description: A status object.
        default:
          content:
            application/json:
              schema:
                $ref: ./definitions/Error.yaml#/Error
          description: Unexpected error
      summary: Assign a Document
      tags:
      - Documents
      x-codegen-request-body-name: body
      x-contentType: application/json
      x-accepts: application/json
  /documents/pretranslate:
    post:
      description: |
        Initiate pretranslation of a list of Documents. This request will mark
        document(s) as being pretranslated. Pretranslation in this context is:
        - Applying and confirming exact TM matches based on the Memory of the
        Project;
        - Translating all other segments via MT without confirming
        them.

        Example CURL command:
        ```
        curl -X POST https://lilt.com/2/documents/pretranslate?key=API_KEY -d {"id": [123]} -H "Content-Type: application/json"
        ```

        Document translation is an asynchronous process that, in effect, is
        performed in the background.

        To check the status of pretranslation for a document, use the `GET
        /documents` endpoint. When pretranslation is in progress for a document,
        the `GET /documents` endpoint's response will include `is_pretranslating
        = true` as well as a more detailed status property
        `status.pretranslation` one of `idle`, `pending`, or `running`.

        Once pretranslation is finished, the document can be downloaded via `GET
        /documents/files`.
      operationId: pretranslateDocuments
      parameters:
      - description: Deprecated, use body param instead. Optional parameter for auto-accepting
          100% TM hits.
        in: query
        name: auto_accept
        schema:
          type: boolean
      - description: Deprecated, use body param instead. Optional for using case matching
          against TM hits.
        in: query
        name: case_sensitive
        schema:
          type: boolean
      - description: Deprecated, use body param instead. Optional parameter for attributing
          translation authorship of exact matches to document creator.
        in: query
        name: attribute_to_creator
        schema:
          type: boolean
      - description: |
          Deprecated, use body param instead. An optional parameter indicating how the document will be pretranslated.

          The accepted values are `tm`, or `tm+mt`. Default is `tm`.
        in: query
        name: mode
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/DocumentPretranslateParameters'
        content:
          application/json:
            schema:
              example:
                mode: tm+mt
                attribute_to_creator: false
                case_sensitive: false
                id:
                - 123
                - 234
                auto_accept: false
              properties:
                id:
                  description: A list of unique Document identifiers.
                  example:
                  - 123
                  - 234
                  items:
                    type: integer
                  type: array
                auto_accept:
                  description: Optional parameter for auto-accepting 100% TM hits.
                  example: false
                  type: boolean
                case_sensitive:
                  description: Optional for using case matching against TM hits..
                  example: false
                  type: boolean
                attribute_to_creator:
                  description: Optional parameter for attributing translation authorship
                    of exact matches to document creator.
                  example: false
                  type: boolean
                mode:
                  description: |
                    An optional parameter indicating how the document will be pretranslated.

                    The accepted values are `tm`, or `tm+mt`. Default is `tm`.
                  example: tm+mt
                  type: string
              required:
              - id
              title: DocumentPretranslateParameters
              type: object
        description: A list of unique Document identifiers.
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentPretranslateResponse'
          description: A status object.
        default:
          content:
            application/json:
              schema:
                $ref: ./definitions/Error.yaml#/Error
          description: Unexpected error
      summary: Pretranslate a Document
      tags:
      - Documents
      x-codegen-request-body-name: body
      x-contentType: application/json
      x-accepts: application/json
  /documents/files:
    get:
      description: |+
        Export a Document that has been translated in the Lilt web application.
        Any Document can be downloaded in XLIFF 1.2 format, or can be retrieved in its original uploaded format by setting `is_xliff=false`.
        This endpoint will fail if either (a) export or (b) pre-translation operations are in-progress. The status of those operations can be determined by retrieving the Document resource.
        Example CURL command:
        ```
          curl -X GET https://lilt.com/2/documents/files?key=API_KEY&id=274 -o from_lilt.xliff
        ```

      operationId: downloadDocument
      parameters:
      - description: An unique Document identifier.
        in: query
        name: id
        required: true
        schema:
          type: integer
      - description: Download the document in XLIFF 1.2 format.
        in: query
        name: is_xliff
        schema:
          default: true
          type: boolean
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: byte
                title: DocumentDownloadResponse
                type: string
          description: A file.
        "502":
          content: {}
          description: File in pretranslation.
        default:
          content:
            application/octet-stream:
              schema:
                $ref: ./definitions/Error.yaml#/Error
          description: Unexpected error
      summary: Download a Document
      tags:
      - Documents
      x-accepts: application/octet-stream
    post:
      description: |+
        Create a Document from a file in any of the formats [documented in our knowledge base](https://support.lilt.com/hc/en-us/articles/360020816253-File-Formats).
        Request parameters should be passed as JSON object with the header field `LILT-API`.

        File names in the header can only contain [US-ASCII characters](https://en.wikipedia.org/wiki/ASCII). File names with characters outside of US-ASCII should be [URI encoded](https://en.wikipedia.org/wiki/Percent-encoding) or transliterated to US-ASCII strings.

        Example CURL command:
        ```
          curl -X POST https://lilt.com/2/documents/files?key=API_KEY \
          --header "LILT-API: {\"name\": \"introduction.xliff\",\"pretranslate\": \"tm+mt\",\"project_id\": 9}" \
          --header "Content-Type: application/octet-stream" \
          --data-binary @Introduction.xliff
        ```

      operationId: uploadDocument
      parameters:
      - description: A file name.
        in: header
        name: name
        required: true
        schema:
          type: string
      - description: A unique Project identifier.
        in: header
        name: project_id
        required: true
        schema:
          type: integer
      - description: |
          An optional parameter indicating if and how the document will be
          pretranslated upon being uploaded.
          The accepted values are `TM`, or `TM+MT`
        in: header
        name: pretranslate
        schema:
          type: string
      - description: |
          An optional parameter to auto-accept segments with 100% translation
          memory matches when the `pretranslate` option is also set, or to
          auto-accept any target data that is present when the uploaded file
          is XLIFF. If omitted or set to `false`, no segments will be
          auto-accepted.
        in: header
        name: auto_accept
        schema:
          type: boolean
      - description: |
          An optional parameter to use case sensitive translation memory matching when the `pretranslate`
          option is also enabled. Matches must have identical character-by-character case to qualify as matches.
          Default value is `false`
        in: header
        name: case_sensitive
        schema:
          type: boolean
      - description: |
          An optional parameter to attribute translation authorship of exact matches to the author of the file
          when the `pretranslate` option is also enabled. Default value is `false`
        in: header
        name: match_attribution
        schema:
          type: boolean
      - description: |
          An optional pararameter to specify an import configuration to
          be applied when extracting translatable content from this file.
        in: header
        name: config_id
        schema:
          type: integer
      requestBody:
        content:
          application/octet-stream:
            schema:
              example: |-
                <?xml version="1.0" encoding="UTF-8" standalone="no"?>
                <xliff xmlns="urn:oasis:names:tc:xliff:document:1.2">
                ...
                </xliff>
              format: binary
              title: DocumentUploadBody
              type: string
        description: |
          The file contents to be uploaded. The entire POST body will be
          treated as the file.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/object-definitions/DocumentWithSegments'
          description: A Document object.
        default:
          content:
            application/json:
              schema:
                $ref: ./definitions/Error.yaml#/Error
          description: Unexpected error
      summary: Upload a File
      tags:
      - Documents
      x-codegen-request-body-name: body
      x-contentType: application/octet-stream
      x-accepts: application/json
  /documents/done/unlock:
    post:
      description: |
        Unlock documents for translation.
        Sets document "Translation Done" and "Review Done" to false.

        Example curl:
        ```
          curl --X --request POST 'https://lilt.com/2/documents/done/unlock?key=API_KEY' \
          --header 'Content-Type: application/json' \
          --data-raw '{
              "documentIds": [23921, 23922]
          }'
        ```
      requestBody:
        content:
          application/json:
            schema:
              title: DocumentDoneUpdateParameters
              type: object
        description: document ids to update
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  description: TODO default missing array inner type to string
                  type: string
                title: DocumentDoneResponse
                type: array
          description: array of updated documents
      summary: Unlock documents
      tags:
      - Documents
      x-codegen-request-body-name: body
      x-contentType: application/json
      x-accepts: application/json
  /documents/done/translation:
    post:
      description: |
        Mark the translation of documents as done/undone in bulk.

        When being marked positively as done:

        - Documents must not already be marked as done and all segments must be confirmed.
        - This request will also trigger an email notification to a document's assigned reviewer that the document is ready for review.

        When being marked as un-done:
        - Documents must not be marked as complete for review.

        Example curl:
        ```
          curl --X --request POST 'https://lilt.com/2/documents/done/translation?key=API_KEY' \
          --header 'Content-Type: application/json' \
          --data-raw '{
              "documentIds": [23921, 23922],
              "isDone": true
          }'
        ```
      requestBody:
        $ref: '#/components/requestBodies/DocumentDoneUpdateParameters'
        content:
          application/json:
            schema:
              example:
                isDone: true
              properties:
                isDone:
                  example: true
                  type: boolean
              required:
              - isDone
              title: DocumentDoneUpdateParameters
              type: object
        description: document ids to update
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  description: TODO default missing array inner type to string
                  type: string
                title: DocumentDoneResponse
                type: array
          description: array of updated documents
      summary: Mark translation done
      tags:
      - Documents
      x-codegen-request-body-name: body
      x-contentType: application/json
      x-accepts: application/json
  /documents/done/review:
    post:
      description: |
        Mark the review of documents as done/undone in bulk.

        When being marked positively as done:

        - Documents must not already be marked as done for review.
        - Documents must already be marked as done for translation.
        - This request will also trigger an email notification.

        Example curl:
        ```
          curl --X --request POST 'https://lilt.com/2/documents/done/review?key=API_KEY' \
          --header 'Content-Type: application/json' \
          --data-raw '{
              "documentIds": [23921, 23922],
              "isDone": true
          }'
        ```
      requestBody:
        $ref: '#/components/requestBodies/DocumentDoneUpdateParameters_1'
        content:
          application/json:
            schema:
              properties:
                isDone:
                  example: true
                  type: boolean
              required:
              - isDone
              title: DocumentDoneUpdateParameters
              type: object
        description: document ids to update
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  description: TODO default missing array inner type to string
                  type: string
                title: DocumentDoneResponse
                type: array
          description: array of updated documents
      summary: Mark review done
      tags:
      - Documents
      x-codegen-request-body-name: body
      x-contentType: application/json
      x-accepts: application/json
  /languages:
    get:
      description: |+
        Get a list of supported languages.

      operationId: getLanguages
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LanguagesResponse'
          description: An object listing supported languages and their corresponding
            locales.
        default:
          content:
            application/json:
              schema:
                $ref: ./definitions/Error.yaml#/Error
          description: Unexpected error
      summary: Retrieve supported languages
      tags:
      - Languages
      x-accepts: application/json
  /lexicon:
    get:
      description: |+
        Query the Lexicon. The Lexicon is an editable termbase / concordance that is integrated with the Memory.

      operationId: queryLexicon
      parameters:
      - description: A unique Memory identifier.
        in: query
        name: memory_id
        required: true
        schema:
          type: integer
      - description: An ISO 639-1 language code.
        in: query
        name: srclang
        required: true
        schema:
          type: string
      - description: An ISO 639-1 language code.
        in: query
        name: trglang
        required: true
        schema:
          type: string
      - description: The query term.
        in: query
        name: query
        required: true
        schema:
          type: string
      - description: The maximum number of results to return.
        in: query
        name: "n"
        schema:
          default: 1
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/object-definitions/LexiconEntry'
                title: LexiconQueryResponse
                type: array
          description: A list of LexiconEntry objects.
        default:
          content:
            application/json:
              schema:
                $ref: ./definitions/Error.yaml#/Error
          description: Unexpected error
      summary: Query a Lexicon
      tags:
      - Lexicon
      x-accepts: application/json
    post:
      description: |+
        Update the Lexicon (Termbase as displayed in the ui) with a new term. The maximum source length is 250
        characters.

      operationId: updateLexicon
      requestBody:
        $ref: '#/components/requestBodies/LexiconUpdateParameters'
        content:
          application/json:
            schema:
              example:
                memory_id: 10641
                source: washing machine
                target: Waschmaschine
              properties:
                memory_id:
                  description: A unique Memory identifier.
                  example: 10641
                  type: integer
                source:
                  description: The source side of the lexicon entry.
                  example: washing machine
                  type: string
                target:
                  description: The target side of the lexicon entry.
                  example: Waschmaschine
                  type: string
              required:
              - memory_id
              - source
              - target
              title: LexiconUpdateParameters
              type: object
        description: The lexicon entry.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LexiconUpdateResponse'
          description: A status object.
        default:
          content:
            application/json:
              schema:
                $ref: ./definitions/Error.yaml#/Error
          description: Unexpected error
      summary: Update a Lexicon
      tags:
      - Lexicon
      x-codegen-request-body-name: body
      x-contentType: application/json
      x-accepts: application/json
  /memories:
    delete:
      description: |
        Delete a Memory.
      operationId: deleteMemory
      parameters:
      - description: A unique Memory identifier.
        in: query
        name: id
        required: true
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemoryDeleteResponse'
          description: A status object.
        default:
          content:
            application/json:
              schema:
                $ref: ./definitions/Error.yaml#/Error
          description: Unexpected error
      summary: Delete a Memory
      tags:
      - Memories
      x-accepts: application/json
    get:
      description: |+
        Retrieve a Memory. If you cannot access the Memory (401 error) please check permissions (e.g. in case you created the Memory via the web app with a different account you may have to explicitly share that Memory).

      operationId: getMemory
      parameters:
      - description: An optional Memory identifier.
        in: query
        name: id
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/object-definitions/Memory'
                title: MemoryResponse
                type: array
          description: A list of Memory objects.
        default:
          content:
            application/json:
              schema:
                $ref: ./definitions/Error.yaml#/Error
          description: Unexpected error
      summary: Retrieve a Memory
      tags:
      - Memories
      x-accepts: application/json
    post:
      description: |+
        Create a new Memory. A Memory is a container that collects source/target
        sentences for a specific language pair (e.g., English>French). The data
        in the Memory is used to train the MT system, populate the TM, and
        update the lexicon. Memories are private to your account - the data is
        not shared across users - unless you explicitly share a Memory with your
        team (via web app only).

        <a href="https://support.lilt.com/hc/en-us/sections/360012579193-Lilt-Translate-Engine" target=_blank>Refer
        to our KB</a> for a more detailed description.

      operationId: createMemory
      requestBody:
        $ref: '#/components/requestBodies/MemoryCreateParameters'
        content:
          application/json:
            schema:
              example:
                trglocale: FR
                name: automotive
                srclang: en
                srclocale: US
                trglang: fr
              properties:
                name:
                  description: A name for the Memory.
                  example: automotive
                  type: string
                srclang:
                  description: An ISO 639-1 language identifier.
                  example: en
                  type: string
                trglang:
                  description: An ISO 639-1 language identifier.
                  example: fr
                  type: string
                srclocale:
                  description: An ISO 3166-1 region name for language locales
                  example: US
                  type: string
                trglocale:
                  description: An ISO 3166-1 region name for language locales
                  example: FR
                  type: string
              required:
              - name
              - srclang
              - trglang
              title: MemoryCreateParameters
              type: object
        description: The Memory resource to create.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/object-definitions/Memory'
          description: A Memory object.
        default:
          content:
            application/json:
              schema:
                $ref: ./definitions/Error.yaml#/Error
          description: Unexpected error
      summary: Create a Memory
      tags:
      - Memories
      x-codegen-request-body-name: body
      x-contentType: application/json
      x-accepts: application/json
    put:
      description: |
        Update a Memory.
      operationId: updateMemory
      requestBody:
        $ref: '#/components/requestBodies/MemoryUpdateParameters'
        content:
          application/json:
            schema:
              example:
                name: Automotive Memory
                id: 7246
              properties:
                id:
                  description: A unique Memory identifier.
                  example: 7246
                  type: integer
                name:
                  description: The Memory name.
                  example: Automotive Memory
                  type: string
              required:
              - id
              - name
              title: MemoryUpdateParameters
              type: object
        description: The Memory resource to update.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/object-definitions/Memory'
          description: A Memory object.
        default:
          content:
            application/json:
              schema:
                $ref: ./definitions/Error.yaml#/Error
          description: Unexpected error
      summary: Update the name of a Memory
      tags:
      - Memories
      x-codegen-request-body-name: body
      x-contentType: application/json
      x-accepts: application/json
  /memories/query:
    get:
      description: |+
        Perform a translation memory query.

      operationId: queryMemory
      parameters:
      - description: A unique Memory identifier.
        in: query
        name: id
        required: true
        schema:
          type: integer
      - description: A source query.
        in: query
        name: query
        required: true
        schema:
          type: string
      - description: Maximum number of results to return.
        in: query
        name: "n"
        schema:
          default: 10
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/object-definitions/TranslationMemoryEntry'
                title: MemoryQueryResponse
                type: array
          description: A list of TranslationMemoryEntry objects.
        default:
          content:
            application/json:
              schema:
                $ref: ./definitions/Error.yaml#/Error
          description: Unexpected error
      summary: Query a Memory
      tags:
      - Memories
      x-accepts: application/json
  /memories/sync:
    delete:
      description: |+
        Deletes segments in the Memory matching the `from_time`, `to_time` and `when` parameters.

        Example CURL command:
        ```
          curl -X DELETE https://lilt.com/2/memories/sync?key=API_KEY&id=42&from_time=1491048000&to_time=1491049800&when=created
        ```

      operationId: syncDeleteMemory
      parameters:
      - description: A unique Memory identifier.
        in: query
        name: id
        required: true
        schema:
          type: integer
      - description: Unix time stamp (epoch, in seconds) of the start of the Memory
          section.
        in: query
        name: from_time
        schema:
          type: integer
      - description: Unix time stamp (epoch, in seconds) of the end of the Memory
          section.
        in: query
        name: to_time
        schema:
          type: integer
      - description: 'The date field on which retrieved segments match from/to time
          stamps: `created`, `updated`, `deleted`.'
        in: query
        name: when
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemorySyncDeleteResponse'
          description: A status object.
        default:
          content:
            application/json:
              schema:
                $ref: ./definitions/Error.yaml#/Error
          description: Unexpected error
      summary: Delete-sync for a Memory
      tags:
      - Memories
      x-accepts: application/json
    get:
      description: |+
        Get all or part of a memory in TMX 1.4b format. If the `from_time` and/or `to_time` are omitted, then all segments are returned. The parameter `when` specifies on which date field `from_time` and `to_time` are matched. Possible values are `created` (when the segment was originally created in the memory), `updated` (when the segment was lastly updated), and `deleted` (when the segment was deleted).

        Example CURL command:
        ```
          curl -X GET https://lilt.com/2/memories/sync?key=API_KEY&id=42 -o from_lilt.tmx
        ```

      operationId: syncDownMemory
      parameters:
      - description: A unique Memory identifier.
        in: query
        name: id
        required: true
        schema:
          type: integer
      - description: Unix time stamp (epoch, in seconds) of the start of the Memory
          section.
        in: query
        name: from_time
        schema:
          type: integer
      - description: Unix time stamp (epoch, in seconds) of the end of the Memory
          section.
        in: query
        name: to_time
        schema:
          type: integer
      - description: 'The date field on which retrieved segments match from/to time
          stamps: `created`, `updated`, `deleted`. If this parameter is omitted, then
          the whole Memory is returned.'
        in: query
        name: when
        schema:
          type: string
      responses:
        "200":
          content:
            application/x-tmx:
              schema:
                format: byte
                title: MemorySyncResponse
                type: string
          description: A TMX 1.4b file.
        default:
          content:
            application/x-tmx:
              schema:
                $ref: ./definitions/Error.yaml#/Error
          description: Unexpected error
      summary: Get-sync for a Memory
      tags:
      - Memories
      x-accepts: application/x-tmx
    post:
      description: |+
        Inserts a TM in TMX 1.4b format into the Memory. Request parameters should be passed as JSON object with the header field `LILT-API`.

        Example CURL command:
        ```
          curl -X POST https://lilt.com/2/memories/sync?key=API_KEY \
            --header "LILT-API: {\"name\": \"my_memory.tmx\",\"id\": 42}" \
            --header "Content-Type: application/octet-stream" \
            --data-binary @my_memory.tmx
        ```

      operationId: syncInsertMemory
      parameters:
      - description: A unique Memory identifier.
        in: header
        name: id
        required: true
        schema:
          type: integer
      - description: Name of the TMX file.
        in: header
        name: name
        schema:
          type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              title: MemoryInsertBody
              type: string
        description: The file contents to be uploaded. The entire POST body will be
          treated as the file.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemoryInsertResponse'
          description: A status object.
        default:
          content:
            application/json:
              schema:
                $ref: ./definitions/Error.yaml#/Error
          description: Unexpected error
      summary: Insert-sync for a Memory
      tags:
      - Memories
      x-codegen-request-body-name: body
      x-contentType: application/octet-stream
      x-accepts: application/json
    put:
      description: |+
        Updates the Memory with given TMX file. Request parameters should be passed as JSON object with the header field `LILT-API`. The number of segments returned by the `from_time`, `to_time`, `when` parameters and the number of segments in the TMX file need to be identical.

        Example CURL command:
        ```
          curl -X PUT https://lilt.com/2/memories/sync?key=API_KEY \
            --header "LILT-API: {\"name\": \"my_memory.tmx\", \"id\": 42, \"from_time\": 1491048000, \"to_time\": 1491049800, "when": "Updated"}" \
            --header "Content-Type: application/octet-stream" \
            --data-binary @my_memory.tmx
        ```

      operationId: syncUpdateMemory
      parameters:
      - description: A unique Memory identifier.
        in: header
        name: id
        required: true
        schema:
          type: integer
      - description: Unix time stamp (epoch, in seconds) of the start of the Memory
          section.
        in: header
        name: from_time
        schema:
          type: integer
      - description: Unix time stamp (epoch, in seconds) of the end of the Memory
          section.
        in: header
        name: to_time
        schema:
          type: integer
      - description: 'The date field on which retrieved segments match from/to time
          stamps: `created`, `updated`, `deleted`.'
        in: header
        name: when
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              title: MemoryUpdateBody
              type: string
        description: The file contents to be uploaded. The entire PUT body will be
          treated as the file.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemoryUpdateResponse'
          description: A status object.
        default:
          content:
            application/json:
              schema:
                $ref: ./definitions/Error.yaml#/Error
          description: Unexpected error
      summary: Update-sync for a Memory
      tags:
      - Memories
      x-codegen-request-body-name: body
      x-contentType: application/json
      x-accepts: application/json
  /memories/import:
    post:
      description: |+
        Imports common translation memory or termbase file formats to a specific Lilt memory. Currently supported file formats are `*.tmx`, `*.sdltm` and `*.tmq` for TM data; `*.csv` and `*.tbx` for termbase data. Request parameters should be passed as JSON object with the header field `LILT-API`.

        Example CURL command to upload a translation memory file named `my_memory.sdltm` in the current working directory:
        ```
          curl -X POST https://lilt.com/2/memories/import?key=API_KEY \
            --header "LILT-API: {\"name\": \"my_memory.sdltm\",\"memory_id\": 42}" \
            --header "Content-Type: application/octet-stream" \
            --data-binary @my_memory.sdltm
        ```

      operationId: importMemoryFile
      parameters:
      - description: A unique Memory identifier.
        in: header
        name: memory_id
        required: true
        schema:
          type: integer
      - description: Name of the TM or termbase file.
        in: header
        name: name
        required: true
        schema:
          type: string
      - description: A flag indicating whether an imported Termbase CSV has a header
          row or not (the default value is `false`).
        in: header
        name: has_header_row
        schema:
          type: boolean
      requestBody:
        content:
          application/octet-stream:
            schema:
              format: binary
              title: MemoryImportBody
              type: string
        description: The file contents to be uploaded. The entire POST body will be
          treated as the file.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemoryImportResponse'
          description: A status object.
        default:
          content:
            application/json:
              schema:
                $ref: ./definitions/Error.yaml#/Error
          description: Unexpected error
      summary: File import for a Memory
      tags:
      - Memories
      x-codegen-request-body-name: body
      x-contentType: application/octet-stream
      x-accepts: application/json
  /jobs:
    get:
      description: "Get all Jobs. You can retrieve all jobs from your account using\
        \ the above API.\n\nExample CURL command: \n\n```\ncurl -X GET 'https://lilt.com/2/jobs?key=API_KEY&isArchived=false'\n\
        ```"
      operationId: retrieveAllJobs
      parameters:
      - description: Retrieves all jobs that are archived.
        in: query
        name: isArchived
        schema:
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/object-definitions/Job'
                title: JobsResponse
                type: array
          description: A list of Job objects.
        default:
          content:
            application/json:
              schema:
                $ref: ./definitions/Error.yaml#/Error
          description: Unexpected error
      summary: Retrieve all Jobs
      tags:
      - Jobs
      x-accepts: application/json
    post:
      description: "Create a Job. A Job is a collection of Projects.\nA Job will contain\
        \ multiple projects, based on the language pair.\nA Project is associated\
        \ with exactly one Memory.\n\nJobs appear in the Jobs dashboard of the web\
        \ app.\n\nExample CURL command: \n\n```\ncurl -X POST 'https://lilt.com/2/jobs?key=API_KEY'\
        \ \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n  \"name\"\
        : \"test job\",\n  \"fileIds\": [5009, 5010, 5011],\n  \"due\": \"2022-05-05T10:56:44.985Z\"\
        ,\n  \"srcLang\": \"en\",\n  \"srcLocale\": \"US\",\n  \"languagePairs\":\
        \ [\n      { \"memoryId\": 3121, \"trgLang\": \"de\" },\n      { \"memoryId\"\
        : 2508, \"trgLang\": \"fr\" },\n      { \"memoryId\": 3037, \"trgLang\": \"\
        zh\" }\n    ]\n}'\n```\n\n"
      operationId: createJob
      requestBody:
        $ref: '#/components/requestBodies/JobCreateParameters'
        content:
          application/json:
            schema:
              example:
                languagePairs:
                - '{}'
                - '{}'
                due: 2021-10-05T14:48:00.000Z
                fileIds:
                - 298
                - 299
                name: My new Job
              properties:
                name:
                  description: A name for the Job.
                  example: My new Job
                  type: string
                due:
                  description: An ISO string date.
                  example: 2021-10-05T14:48:00.000Z
                  type: string
                languagePairs:
                  description: Language pairs is a set of one or more pairs that includes
                    source language, source locale(optional), target language, target
                    locale(optional), and memoryId.
                  items:
                    $ref: '#/object-definitions/LanguagePair'
                  type: array
                fileIds:
                  description: A list of file ids to upload to job creation.
                  example:
                  - 298
                  - 299
                  items:
                    type: integer
                  type: array
              required:
              - fileIds
              - languagePairs
              - name
              title: JobCreateParameters
              type: object
        description: The Job resource to create.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/object-definitions/Job'
          description: A Job object.
        default:
          content:
            application/json:
              schema:
                $ref: ./definitions/Error.yaml#/Error
          description: Unexpected error
      summary: Create a Job
      tags:
      - Jobs
      x-codegen-request-body-name: body
      x-contentType: application/json
      x-accepts: application/json
  /jobs/{jobId}:
    delete:
      description: "Delete a job, deletes all projects and documents in the job, deletes\
        \ all the segments from all the job's translation memories.\n\nExample CURL\
        \ command: \n\n```\ncurl -X DELETE 'https://lilt.com/2/jobs/{id}?key=API_KEY'\n\
        ```"
      operationId: deleteJob
      parameters:
      - description: A job id.
        in: path
        name: id
        required: true
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobDeleteResponse'
          description: A status object.
        default:
          content:
            application/json:
              schema:
                $ref: ./definitions/Error.yaml#/Error
          description: Unexpected error
      summary: Delete a Job
      tags:
      - Jobs
      x-accepts: application/json
    get:
      description: "Retrieves a job data along with stats. To retrieve a specific\
        \ job, you will need the job `id` in the url path.\n\nExample CURL command:\
        \ \n\n```\ncurl -X GET 'https://lilt.com/2/jobs/{id}?key=API_KEY'\n```"
      operationId: getJob
      parameters:
      - description: A job id.
        in: path
        name: jobId
        required: true
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/object-definitions/Job'
          description: A job object.
        default:
          content:
            application/json:
              schema:
                $ref: ./definitions/Error.yaml#/Error
          description: Unexpected error
      summary: Retrieve a Job
      tags:
      - Jobs
      x-accepts: application/json
    put:
      description: "Updates a job with the new job properties. To update a specific\
        \ job, you will need the job `id` in the url path.\n\nYou can update job's\
        \ name and due date by passing the property and new value in the body.\n\n\
        Example CURL command: \n\n```\ncurl -X PUT 'https://lilt.com/2/jobs/{id}?key=API_KEY'\
        \ \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n  \"name\"\
        : \"test job\",\n  \"due\": \"2022-05-05T10:56:44.985Z\"\n}'\n```"
      operationId: updateJob
      parameters:
      - description: A job id.
        in: path
        name: id
        required: true
        schema:
          type: integer
      requestBody:
        $ref: '#/components/requestBodies/JobUpdateParameters'
        content:
          application/json:
            schema:
              example:
                dueDate: 0
                name: My new Job
              properties:
                name:
                  description: A name for the Job.
                  example: My new Job
                  type: string
                dueDate:
                  description: An ISO string date.
                  type: integer
              title: JobUpdateParameters
              type: object
        description: The Job resource to update.
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/object-definitions/Job'
          description: A job object.
        default:
          content:
            application/json:
              schema:
                $ref: ./definitions/Error.yaml#/Error
          description: Unexpected error
      summary: Update a Job
      tags:
      - Jobs
      x-codegen-request-body-name: body
      x-contentType: application/json
      x-accepts: application/json
  /jobs/{jobId}/stats:
    post:
      description: |-
        Get the TM leverage stats for the job (new/exact/fuzzy matches).

        Example CURL command:

        ```
        curl -X POST 'https://lilt.com/2/jobs/{id}/stats?key=API_KEY'
        ```
      operationId: getJobLeverageStats
      parameters:
      - description: A job id.
        in: path
        name: jobId
        required: true
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/object-definitions/JobLeverageStats'
          description: A job leverage stats object.
        default:
          content:
            application/json:
              schema:
                $ref: ./definitions/Error.yaml#/Error
          description: Unexpected error
      summary: Retrieve Job Leverage Stats
      tags:
      - Jobs
      x-accepts: application/json
  /jobs/{jobId}/archive:
    post:
      description: "Set job to archived, unassign all linguists and archive all projects\
        \ and documents inside the job.\n\nIt will return the archived job.\n\nExample\
        \ CURL command: \n\n```\ncurl -X POST 'https://lilt.com/2/jobs/{id}/archive?key=API_KEY'\n\
        ```"
      operationId: archiveJob
      parameters:
      - description: A job id.
        in: path
        name: jobId
        required: true
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/object-definitions/Job'
          description: A job object.
        default:
          content:
            application/json:
              schema:
                $ref: ./definitions/Error.yaml#/Error
          description: Unexpected error
      summary: Archive a Job
      tags:
      - Jobs
      x-accepts: application/json
  /jobs/{jobId}/unarchive:
    post:
      description: "Set job to unarchived, the job will move to active status.\n\n\
        Example CURL command: \n\n```\ncurl -X POST 'https://lilt.com/2/jobs/{id}/unarchive?key=API_KEY'\n\
        ```"
      operationId: unarchiveJob
      parameters:
      - description: A job id.
        in: path
        name: jobId
        required: true
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/object-definitions/Job'
          description: A job object.
        default:
          content:
            application/json:
              schema:
                $ref: ./definitions/Error.yaml#/Error
          description: Unexpected error
      summary: Unarchive a Job
      tags:
      - Jobs
      x-accepts: application/json
  /jobs/{jobId}/deliver:
    post:
      description: "Set the job state to delivered and set all the projects in the\
        \ job to done\n\nIt will return the delivered job.\n\nExample CURL command:\
        \ \n\n```\ncurl -X POST 'https://lilt.com/2/jobs/{id}/deliver?key=API_KEY'\n\
        ```"
      operationId: deliverJob
      parameters:
      - description: A job id.
        in: path
        name: jobId
        required: true
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/object-definitions/Job'
          description: A job object.
        default:
          content:
            application/json:
              schema:
                $ref: ./definitions/Error.yaml#/Error
          description: Unexpected error
      summary: Deliver a Job
      tags:
      - Jobs
      x-accepts: application/json
  /jobs/{jobId}/reactivate:
    post:
      description: "Set the job state to active. Does not change the state of projects\
        \ associated with the given job.\n\nIt will return the reactivated job.\n\n\
        Example CURL command: \n\n```\ncurl -X POST 'https://lilt.com/2/jobs/{id}/reactivate?key=API_KEY'\n\
        ```"
      operationId: reactivateJob
      parameters:
      - description: A job id.
        in: path
        name: jobId
        required: true
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/object-definitions/Job'
          description: A job object.
        default:
          content:
            application/json:
              schema:
                $ref: ./definitions/Error.yaml#/Error
          description: Unexpected error
      summary: Reactivate a Job
      tags:
      - Jobs
      x-accepts: application/json
  /jobs/{jobId}/export:
    get:
      description: "Prepare job files for download.\nTo export translated documents\
        \ from the job use the query parameter `type=files`: \n\nExample CURL command:\
        \ \n\n```\ncurl -X GET 'https://lilt.com/2/jobs/{id}/export?key=API_KEY&type=files'\n\
        ```\n\nTo export job memories use the query parameter `type=memory`.\n\nThe\
        \ status of the export can be checked by requesting the job `GET /jobs/:jobId`,\
        \ `job.isProcessing` will be `1` while in progress,\n`0` when idle and `-2`\
        \ when the export failed."
      operationId: exportJob
      parameters:
      - description: A job id.
        in: path
        name: jobId
        required: true
        schema:
          type: integer
      - description: category for files and memory.
        in: query
        name: type
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: 200 status.
        default:
          content:
            application/json:
              schema:
                $ref: ./definitions/Error.yaml#/Error
          description: Unexpected error
      summary: Export a Job
      tags:
      - Jobs
      x-accepts: application/json
  /jobs/{jobId}/downlod:
    get:
      description: "Make sure you have exported a job with the same id before using\
        \ this api.  \n\nDownloading files requires the exported job `id` in the param.\n\
        \nExample CURL command: \n\n```\ncurl -X GET 'https://lilt.com/2/jobs/{id}/download?key=API_KEY'\n\
        ```"
      operationId: downloadJob
      parameters:
      - description: A job id.
        in: path
        name: jobId
        required: true
        schema:
          type: integer
      responses:
        "200":
          content: {}
          description: zipped file
        default:
          content:
            application/json:
              schema:
                $ref: ./definitions/Error.yaml#/Error
          description: Unexpected error
      summary: Download a Job
      tags:
      - Jobs
      x-accepts: application/json
  /projects:
    delete:
      description: |
        Delete a Project.
      operationId: deleteProject
      parameters:
      - description: A unique Project identifier.
        in: query
        name: id
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectDeleteResponse'
          description: A status object.
        default:
          content:
            application/json:
              schema:
                $ref: ./definitions/Error.yaml#/Error
          description: Unexpected error
      summary: Delete a Project
      tags:
      - Projects
      x-accepts: application/json
    get:
      description: |-
        Retrieves one or more projects, including the documents associated with each project. Retrieving a project is the most efficient way to retrieve a single project or a list of all available projects.

        To retrieve a specific project, specify the `id` request parameter. To retrieve all projects, omit the `id` request parameter. To limit the retrieved projects to those with a particular source language or target language, specify the corresponding ISO 639-1 language codes in the `srclang` and `trglang` request parameters, respectively.
      operationId: getProjects
      parameters:
      - description: A unique Project identifier.
        in: query
        name: id
        schema:
          type: integer
      - description: An ISO 639-1 language code.
        in: query
        name: srclang
        schema:
          type: string
      - description: An ISO 639-1 language code.
        in: query
        name: trglang
        schema:
          type: string
      - description: Unix time stamp (epoch, in seconds) of Projects with `created_at`
          greater than or equal to the value.
        in: query
        name: from_time
        schema:
          type: integer
      - description: Unix time stamp (epoch, in seconds) of Projects with `created_at`
          less than the value.
        in: query
        name: to_time
        schema:
          type: integer
      - description: A project state (backlog, inProgress, inReview, inQA, done).
        in: query
        name: state
        schema:
          type: string
      - description: A flag that toggles whether to include archived projects in the
          response (the default is `true`).
        in: query
        name: archived
        schema:
          type: boolean
      - description: A unique Connector identifier.
        in: query
        name: connector_id
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/object-definitions/Project'
                title: ProjectResponse
                type: array
          description: A list of Project objects.
        default:
          content:
            application/json:
              schema:
                $ref: ./definitions/Error.yaml#/Error
          description: Unexpected error
      summary: Retrieve a Project
      tags:
      - Projects
      x-accepts: application/json
    post:
      description: |+
        Create a Project. A Project is a collection of Documents.

        A Project is associated with exactly one Memory.

        Projects appear in the dashboard of the web app.

      operationId: createProject
      requestBody:
        $ref: '#/components/requestBodies/ProjectCreateParameters'
        content:
          application/json:
            schema:
              example:
                metadata:
                  connectorType: github
                  notes: example metadata
                memory_id: 1234
                job_id: 1234
                name: My new project
                due_date: 1489147692
              properties:
                name:
                  description: A name for the Project.
                  example: My new project
                  type: string
                memory_id:
                  description: The Memory to associate with this new Project.
                  example: 1234
                  type: integer
                job_id:
                  description: |
                    The Job to associate with this new Project. If a Job ID is not
                    provided then a new Job will be created to contain the
                    Project.
                  example: 1234
                  type: integer
                due_date:
                  description: The due date. Measured in seconds since the Unix epoch.
                  example: 1489147692
                  type: integer
                metadata:
                  description: A JSON object of key/value string pairs. Stores custom
                    project information.
                  example:
                    connectorType: github
                    notes: example metadata
                  properties: {}
                  type: object
              required:
              - memory_id
              - name
              title: ProjectCreateParameters
              type: object
        description: The Project resource to create.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/object-definitions/Project'
          description: A Project object.
        default:
          content:
            application/json:
              schema:
                $ref: ./definitions/Error.yaml#/Error
          description: Unexpected error
      summary: Create a Project
      tags:
      - Projects
      x-codegen-request-body-name: body
      x-contentType: application/json
      x-accepts: application/json
    put:
      description: |
        Update a Project.
      operationId: updateProject
      requestBody:
        $ref: '#/components/requestBodies/ProjectUpdateResponse'
        content:
          application/json:
            schema:
              example:
                archived: false
                metadata:
                  connectorType: github
                  notes: example metadata
                sample_review_percentage: 20
                name: Walker Percy Essays
                due_date: 1489147692
                id: 1234
                state: backlog
              properties:
                id:
                  description: A unique Project identifier.
                  example: 1234
                  type: integer
                name:
                  description: The Project name.
                  example: Walker Percy Essays
                  type: string
                state:
                  description: The project's state. The possible states are 'backlog',
                    'inProgress', 'inReview', 'inQA', and 'done'
                  example: backlog
                  type: string
                due_date:
                  description: The due date. Measured in seconds since the Unix epoch.
                  example: 1489147692
                  type: integer
                archived:
                  description: True if the project is archived. Otherwise, false.
                  example: false
                  type: boolean
                metadata:
                  description: Metadata associated with a project. This field must
                    be valid JSON.
                  example:
                    connectorType: github
                    notes: example metadata
                  properties: {}
                  type: object
                sample_review_percentage:
                  description: The Project's sample review percentage. Must be an
                    integer between 10 and 100, a multiple of 10 and greater than
                    minimum value (displayed in error message).
                  example: 20
                  type: integer
              required:
              - id
              title: ProjectUpdateResponse
              type: object
        description: The Project resource to update.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/object-definitions/Project'
          description: A Project object.
        default:
          content:
            application/json:
              schema:
                $ref: ./definitions/Error.yaml#/Error
          description: Unexpected error
      summary: Update a Project
      tags:
      - Projects
      x-codegen-request-body-name: body
      x-contentType: application/json
      x-accepts: application/json
  /projects/quote:
    get:
      description: |+
        Get information about a project that can be used for quoting. This includes:
        * A translation memory leverage report
        * Word count
        * Segment count

      operationId: getProjectReport
      parameters:
      - description: A unique Project identifier.
        in: query
        name: id
        required: true
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/object-definitions/ProjectQuote'
          description: An object that represents a Project quote.
        default:
          content:
            application/json:
              schema:
                $ref: ./definitions/Error.yaml#/Error
          description: Unexpected error
      summary: Retrieve Project report
      tags:
      - Projects
      x-accepts: application/json
  /projects/status:
    get:
      description: |+
        Retrieve the status of a Project.

      operationId: getProjectStatus
      parameters:
      - description: A unique Project identifier.
        in: query
        name: id
        required: true
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/object-definitions/ProjectStatus'
          description: An object that represents a Project status report.
        default:
          content:
            application/json:
              schema:
                $ref: ./definitions/Error.yaml#/Error
          description: Unexpected error
      summary: Retrieve Project status
      tags:
      - Projects
      x-accepts: application/json
  /qa:
    get:
      description: |
        Perform QA checks on a target string. Optionally, you can specify a source string for additional bilingual checks, e.g. number consistency.
      operationId: qaCheck
      parameters:
      - description: A target string to be checked.
        in: query
        name: target
        required: true
        schema:
          type: string
      - description: An ISO 639-1 language code.
        in: query
        name: trglang
        required: true
        schema:
          type: string
      - description: An optional source string.
        in: query
        name: source
        schema:
          type: string
      - description: An ISO 639-1 language code.
        in: query
        name: srclang
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/object-definitions/QARuleMatches'
          description: A QARuleMatches object.
        default:
          content:
            application/json:
              schema:
                $ref: ./definitions/Error.yaml#/Error
          description: Unexpected error
      summary: Perform QA check
      tags:
      - QA
      x-accepts: application/json
  /segments:
    delete:
      description: |
        Delete a Segment from memory. This will not delete a segment from a document.
      operationId: deleteSegment
      parameters:
      - description: A unique Segment identifier.
        in: query
        name: id
        required: true
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SegmentDeleteResponse'
          description: A status object.
        default:
          content:
            application/json:
              schema:
                $ref: ./definitions/Error.yaml#/Error
          description: Unexpected error
      summary: Delete a Segment
      tags:
      - Segments
      x-accepts: application/json
    get:
      description: |+
        Retrieve a Segment.

      operationId: getSegment
      parameters:
      - description: A unique Segment identifier.
        in: query
        name: id
        required: true
        schema:
          type: integer
      - description: Include comments in the response.
        in: query
        name: include_comments
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/object-definitions/SegmentWithComments'
          description: A Segment object.
        default:
          content:
            application/json:
              schema:
                $ref: ./definitions/Error.yaml#/Error
          description: Unexpected error
      summary: Retrieve a Segment
      tags:
      - Segments
      x-accepts: application/json
    post:
      description: |+
        Create a Segment and add it to a Memory. A Segment is a source/target
        pair that is used to train the machine translation system and populate
        the translation memory. This is not intended to be used on documents and will throw an error.

        The maximum source length is 5,000 characters.

      operationId: createSegment
      requestBody:
        $ref: '#/components/requestBodies/SegmentCreateParameters'
        content:
          application/json:
            schema:
              example:
                memory_id: 10641
                source: Code zur Fehleranalyse einschalten
                document_id: 1876
                target: Enable debugging code
              properties:
                memory_id:
                  description: A unique Memory identifier.
                  example: 10641
                  type: integer
                document_id:
                  description: A unique Document identifier.
                  example: 1876
                  type: integer
                source:
                  description: The source string.
                  example: Code zur Fehleranalyse einschalten
                  type: string
                target:
                  description: The target string.
                  example: Enable debugging code
                  type: string
              required:
              - source
              title: SegmentCreateParameters
              type: object
        description: |
          The Segment resource to create.

          To add a Segment to a Memory, include the `memory_id` and `target` parameters.

          To add a Segment to a Document, include the `document_id` and the `source` parameters.
          The `target` parameter is optional.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/object-definitions/Segment'
          description: A Segment object.
        default:
          content:
            application/json:
              schema:
                $ref: ./definitions/Error.yaml#/Error
          description: Unexpected error
      summary: Create a Segment
      tags:
      - Segments
      x-codegen-request-body-name: body
      x-contentType: application/json
      x-accepts: application/json
    put:
      description: |+
        Update a Segment in memory. The Memory will be updated with the new target string.

      operationId: updateSegment
      requestBody:
        $ref: '#/components/requestBodies/SegmentUpdateParameters'
        content:
          application/json:
            schema:
              example:
                id: 84480010
                target: Enable debug code
              properties:
                id:
                  description: A unique Segment identifier.
                  example: 84480010
                  type: integer
                target:
                  description: The target string.
                  example: Enable debug code
                  type: string
              required:
              - id
              - target
              title: SegmentUpdateParameters
              type: object
        description: The Segment resource to update.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/object-definitions/Segment'
          description: A Segment object.
        default:
          content:
            application/json:
              schema:
                $ref: ./definitions/Error.yaml#/Error
          description: Unexpected error
      summary: Update a Segment
      tags:
      - Segments
      x-codegen-request-body-name: body
      x-contentType: application/json
      x-accepts: application/json
  /segments/review/unlock:
    post:
      description: |
        Unaccept and unlock segments.
        Sets individual segments' "Review Done" to false. Confirmed segments will remain confirmed.

        Example curl:
        ```
          curl --X --request POST 'https://lilt.com/2/segments/review/unlock?key=API_KEY' \
          --header 'Content-Type: application/json' \
          --data-raw '{
              "segmentIds": [23921, 23922]
          }'
        ```
      requestBody:
        content:
          application/json:
            schema:
              title: SegmentDoneResponse
              type: object
        description: segment ids to update
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  description: TODO default missing array inner type to string
                  type: string
                title: SegmentDoneResponse
                type: array
          description: array of updated segments
      summary: Unaccept and unlock segments
      tags:
      - Segments
      x-codegen-request-body-name: body
      x-contentType: application/json
      x-accepts: application/json
  /segments/tag:
    get:
      description: |+
        Project tags for a segment. The `source_tagged` string contains one or more SGML
        tags. The `target` string is untagged. This endpoint will automatically place the
        source tags in the target.

        Usage charges apply to this endpoint for production REST API keys.

      operationId: tagSegment
      parameters:
      - description: The tagged source string.
        in: query
        name: source_tagged
        required: true
        schema:
          type: string
      - description: The target string.
        in: query
        name: target
        required: true
        schema:
          type: string
      - description: A unique Memory identifier.
        in: query
        name: memory_id
        required: true
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/object-definitions/TaggedSegment'
          description: A TaggedSegment object.
        default:
          content:
            application/json:
              schema:
                $ref: ./definitions/Error.yaml#/Error
          description: Unexpected error
      summary: Tag a Segment
      tags:
      - Segments
      x-accepts: application/json
  /settings:
    post:
      description: |+
        Create or update the value for the given setting and setting scope.

        Example CURL to set an organization-level setting:

        ```
        curl --location --request POST 'https://lilt.com/2/settings?key=<API_KEY>' \
        --header 'Content-Type: application/json' \
        --data-raw '{
            "settingName": "requireBatchQaTranslator",
            "value": false,
            "organizationId": 285,
            "scope": "Organization"
        }'
        ```

      operationId: upsertSetting
      requestBody:
        content:
          application/json:
            schema:
              $ref: ./definitions/Settings/SettingUpsertBody.yaml#/SettingUpsertBody
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/SettingUpsertResponse'
          description: Updated settings object and updated active settings.
        default:
          content:
            application/json:
              schema:
                $ref: ./definitions/Error.yaml#/Error
          description: Unexpected error
      summary: Get organization-level settings
      tags:
      - Settings
      x-codegen-request-body-name: body
      x-contentType: application/json
      x-accepts: application/json
  /settings/organization:
    get:
      description: |+
        Get the organization-level settings for the active users organization

        Example CURL:

        ```
        curl --location --request GET 'https://lilt.com/2/settings/organization?key=<API_KEY>' \
        ```

      operationId: getOrganizationSettings
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SettingDictionary'
          description: Organization settings dictionary.
        default:
          content:
            application/json:
              schema:
                $ref: ./definitions/Error.yaml#/Error
          description: Unexpected error
      summary: Update or create a setting
      tags:
      - Settings
      x-accepts: application/json
  /settings/project/{projectId}:
    get:
      description: "Get the settings as applied to a specific project. \nActive settings\
        \ will combine project-level settings, organization-level settings and fallback\
        \ to setting default values.\n\nExample CURL:\n\n```\ncurl --location --request\
        \ GET 'https://lilt.com/2/settings/project/123?key=<API_KEY>' \\\n```\n\n"
      operationId: getProjectSettings
      parameters:
      - description: A project id.
        in: path
        name: projectId
        required: true
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SettingDictionary'
          description: Project settings dictionary.
        default:
          content:
            application/json:
              schema:
                $ref: ./definitions/Error.yaml#/Error
          description: Unexpected error
      summary: Get settings for a project
      tags:
      - Settings
      x-accepts: application/json
  /settings/user:
    get:
      description: |+
        Get the active settings applied to a user.

        Example CURL:

        ```
        curl --location --request GET 'https://lilt.com/2/settings/user?key=<API_KEY>' \
        ```

      operationId: getUserSettings
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SettingDictionary'
          description: Project settings dictionary.
        default:
          content:
            application/json:
              schema:
                $ref: ./definitions/Error.yaml#/Error
          description: Unexpected error
      summary: Get settings for a project
      tags:
      - Settings
      x-accepts: application/json
  /translate:
    get:
      description: |+
        Translate a source string.

        Setting the `rich` parameter to `true` will change the response format
        to include additional information about each translation including a
        model score, word alignments,  and formatting information. The rich
        format can be seen in the example response on this page.

        By default, this endpoint also returns translation memory (TM) fuzzy matches, along
        with associated scores. Fuzzy matches always appear ahead of machine translation
        output in the response.

        The maximum source length is 5,000 characters.

        Usage charges apply to this endpoint for production REST API keys.

      operationId: translateSegment
      parameters:
      - description: A unique Memory identifier.
        in: query
        name: memory_id
        required: true
        schema:
          type: integer
      - description: The source text to be translated.
        in: query
        name: source
        schema:
          type: string
      - description: A source hash code.
        in: query
        name: source_hash
        schema:
          type: integer
      - description: A target prefix.
        in: query
        name: prefix
        schema:
          type: string
      - description: Return top n translations (deprecated).
        in: query
        name: "n"
        schema:
          default: 1
          type: integer
      - description: Returns rich translation information (e.g., with word alignments).
        in: query
        name: rich
        schema:
          default: false
          type: boolean
      - description: Include translation memory fuzzy matches.
        in: query
        name: tm_matches
        schema:
          default: true
          type: boolean
      - description: Project tags. Projects tags in source to target if set to true.
        in: query
        name: project_tags
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/object-definitions/TranslationList'
          description: A TranslationList object.
        default:
          content:
            application/json:
              schema:
                $ref: ./definitions/Error.yaml#/Error
          description: Unexpected error
      summary: Translate a segment
      tags:
      - Translate
      x-accepts: application/json
  /translate/register:
    get:
      description: |+
        Register a source string for interactive translation. The `source_hash` value that is returned by this request is required by the `prefix` parameter for the translation endpoint.
        The maximum source length is 5,000 characters.
        Usage charges apply to this endpoint for production REST API keys.

      operationId: registerSegment
      parameters:
      - description: A source string to be registered.
        in: query
        name: source
        required: true
        schema:
          type: string
      - description: An ISO 639-1 language code.
        in: query
        name: srclang
        required: true
        schema:
          type: string
      - description: An ISO 639-1 language code.
        in: query
        name: trglang
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TranslateRegisterResponse'
          description: A status object.
        default:
          content:
            application/json:
              schema:
                $ref: ./definitions/Error.yaml#/Error
          description: Unexpected error
      summary: Register a segment
      tags:
      - Translate
      x-accepts: application/json
  /translate/file:
    get:
      description: |+
        Get information about the one or more Files that are being translated with machine translation. Query filters are optional but at least one must be provided.

        Example CURL:
        ```
        curl --X --request GET 'https://lilt.com/2/translate/file?key=API_KEY&translationIds=1,2&fromTime=1607966744&toTime=1707966744&status=InProgress'
        ```

      operationId: monitorFileTranslation
      parameters:
      - description: List of translation ids, comma separated
        in: query
        name: translationIds
        schema:
          type: string
      - description: One of the translation statuses - `InProgress`, `Completed`,
          `Failed`, `ReadyForDownload`
        in: query
        name: status
        schema:
          type: string
      - description: Results after this time (inclusive) will be returned, specified
          as seconds since the Unix epoch.
        in: query
        name: fromTime
        schema:
          type: number
      - description: Results before this time (exclusive) will be returned, specified
          as seconds since the Unix epoch.
        in: query
        name: toTime
        schema:
          type: number
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/object-definitions/TranslationInfo'
          description: Translation info
        default:
          content:
            application/json:
              schema:
                $ref: ./definitions/Error.yaml#/Error
          description: Unexpected error
      summary: Monitor file translation
      tags:
      - Translate
      x-accepts: application/json
    post:
      description: |+
        Start machine translation of one or more Files that have previously been uploaded.  The response will include an `id` parameter that can be used to monitor and download the translations in subsequent calls.

        Example CURL:
        ```
        curl --X --request POST 'https://lilt.com/2/translate/file?key=API_KEY&fileId=583&memoryId=2495&configId=123'
        ```

      operationId: batchTranslateFile
      parameters:
      - description: List of File ids to be translated, comma separated.
        in: query
        name: fileId
        required: true
        schema:
          type: string
      - description: Id of Memory to use in translation.
        in: query
        name: memoryId
        required: true
        schema:
          type: string
      - description: An optional pararameter to specify an import configuration to
          be applied when extracting translatable content from this file.
        in: query
        name: configId
        schema:
          type: number
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/object-definitions/TranslationInfo'
          description: Translation info
        default:
          content:
            application/json:
              schema:
                $ref: ./definitions/Error.yaml#/Error
          description: Unexpected error
      summary: Translate a File
      tags:
      - Translate
      x-accepts: application/json
  /translate/files:
    get:
      description: |+
        Download a translated File.

        Example CURL:
        ```
        curl --X --request GET 'https://lilt.com/2/translate/files?key=API_KEY&id=1'
        ```

      operationId: downloadFile
      parameters:
      - description: A translation id.
        in: query
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: byte
                title: DocumentDownloadResponse
                type: string
          description: A file.
      summary: Download translated file
      tags:
      - Translate
      x-accepts: application/octet-stream
components:
  requestBodies:
    LexiconUpdateParameters:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LexiconUpdateParameters'
      required: true
    MemoryCreateParameters:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MemoryCreateParameters'
      required: true
    DocumentDoneUpdateParameters:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DocumentDoneUpdateParameters'
      required: true
    DocumentUpdateParameters:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DocumentUpdateParameters'
      required: true
    SegmentUpdateParameters:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SegmentUpdateParameters'
      required: true
    DocumentDoneUpdateParameters_1:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DocumentDoneUpdateParameters_1'
      required: true
    MemoryUpdateParameters:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MemoryUpdateParameters'
      required: true
    DocumentAssignmentParameters:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DocumentAssignmentParameters'
      required: true
    SegmentCreateParameters:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SegmentCreateParameters'
      required: true
    DocumentPretranslateParameters:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DocumentPretranslateParameters'
      required: true
    JobCreateParameters:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/JobCreateParameters'
      required: true
    JobUpdateParameters:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/JobUpdateParameters'
      required: false
    DocumentParameters:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DocumentParameters'
      required: false
    connector:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/connector'
      required: true
    ProjectCreateParameters:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProjectCreateParameters'
      required: true
    ConnectorArguments:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ConnectorArguments'
      required: true
    ProjectUpdateResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProjectUpdateResponse'
      required: true
  schemas:
    DocumentDeleteResponse:
      example:
        deleted: true
        id: 46530
      properties:
        id:
          description: A unique Document identifier.
          example: 46530
          type: integer
        deleted:
          description: If the operation succeeded, then `true`. Otherwise, `false`.
          example: true
          type: boolean
      title: DocumentDeleteResponse
      type: object
    MemoryCreateParameters:
      example:
        trglocale: FR
        name: automotive
        srclang: en
        srclocale: US
        trglang: fr
      properties:
        name:
          description: A name for the Memory.
          example: automotive
          type: string
        srclang:
          description: An ISO 639-1 language identifier.
          example: en
          type: string
        trglang:
          description: An ISO 639-1 language identifier.
          example: fr
          type: string
        srclocale:
          description: An ISO 3166-1 region name for language locales
          example: US
          type: string
        trglocale:
          description: An ISO 3166-1 region name for language locales
          example: FR
          type: string
      required:
      - name
      - srclang
      - trglang
      title: MemoryCreateParameters
      type: object
    MemoryImportResponse:
      example:
        isProcessing: 1
        id: 123
      properties:
        id:
          description: A unique Memory identifier.
          example: 123
          type: integer
        isProcessing:
          description: The current state of the import.
          example: 1
          type: integer
      title: MemoryImportResponse
      type: object
    FileDeleteResponse:
      example:
        deleted: true
        id: 12345
      properties:
        id:
          description: A unique File identifier.
          example: 12345
          type: integer
        deleted:
          description: If the operation succeeded, then `true`. Otherwise, `false`.
          example: true
          type: boolean
      title: FileDeleteResponse
      type: object
    DocumentUpdateParameters:
      example:
        name: Introduction to our App
        id: 46530
      properties:
        id:
          description: A unique Document identifier.
          example: 46530
          type: integer
        name:
          description: The Document name.
          example: Introduction to our App
          type: string
      required:
      - id
      - name
      title: DocumentUpdateParameters
      type: object
    SegmentUpdateParameters:
      example:
        id: 84480010
        target: Enable debug code
      properties:
        id:
          description: A unique Segment identifier.
          example: 84480010
          type: integer
        target:
          description: The target string.
          example: Enable debug code
          type: string
      required:
      - id
      - target
      title: SegmentUpdateParameters
      type: object
    DocumentDoneUpdateParameters_1:
      properties:
        isDone:
          example: true
          type: boolean
      required:
      - isDone
      title: DocumentDoneUpdateParameters
      type: object
    LexiconUpdateResponse:
      example:
        memory_id: 46530
        success: true
      properties:
        memory_id:
          description: A unique Memory identifier.
          example: 46530
          type: integer
        success:
          description: If the operation succeeded, then `true`. Otherwise, `false`.
          example: true
          type: boolean
      title: LexiconUpdateResponse
      type: object
    DocumentParameters:
      example:
        project_id: 23618
        name: Introduction.xliff
      properties:
        name:
          description: The document name.
          example: Introduction.xliff
          type: string
        project_id:
          description: A unique Project identifier.
          example: 23618
          type: integer
      required:
      - name
      - project_id
      title: DocumentParameters
      type: object
    ConnectorArguments:
      example:
        args: '{}'
        schedule: 0 0 * * *
        name: zendesk
        id: 46530
      properties:
        id:
          description: A unique Connector identifier.
          example: 46530
          type: integer
        name:
          description: Name of connector.
          example: zendesk
          type: string
        args:
          description: Connector parameters.
          properties: {}
          type: object
        schedule:
          description: Cron string
          example: 0 0 * * *
          type: string
      title: ConnectorArguments
      type: object
    ProjectUpdateResponse:
      example:
        archived: false
        metadata:
          connectorType: github
          notes: example metadata
        sample_review_percentage: 20
        name: Walker Percy Essays
        due_date: 1489147692
        id: 1234
        state: backlog
      properties:
        id:
          description: A unique Project identifier.
          example: 1234
          type: integer
        name:
          description: The Project name.
          example: Walker Percy Essays
          type: string
        state:
          description: The project's state. The possible states are 'backlog', 'inProgress',
            'inReview', 'inQA', and 'done'
          example: backlog
          type: string
        due_date:
          description: The due date. Measured in seconds since the Unix epoch.
          example: 1489147692
          type: integer
        archived:
          description: True if the project is archived. Otherwise, false.
          example: false
          type: boolean
        metadata:
          description: Metadata associated with a project. This field must be valid
            JSON.
          example:
            connectorType: github
            notes: example metadata
          properties: {}
          type: object
        sample_review_percentage:
          description: The Project's sample review percentage. Must be an integer
            between 10 and 100, a multiple of 10 and greater than minimum value (displayed
            in error message).
          example: 20
          type: integer
      required:
      - id
      title: ProjectUpdateResponse
      type: object
    MemoryUpdateResponse:
      example:
        id: 123
        num_updates: 0
      properties:
        id:
          description: A unique Memory identifier.
          example: 123
          type: integer
        num_updates:
          description: The number of updates to the Memory.
          type: integer
      title: MemoryUpdateResponse
      type: object
    LexiconUpdateParameters:
      example:
        memory_id: 10641
        source: washing machine
        target: Waschmaschine
      properties:
        memory_id:
          description: A unique Memory identifier.
          example: 10641
          type: integer
        source:
          description: The source side of the lexicon entry.
          example: washing machine
          type: string
        target:
          description: The target side of the lexicon entry.
          example: Waschmaschine
          type: string
      required:
      - memory_id
      - source
      - target
      title: LexiconUpdateParameters
      type: object
    DocumentDoneUpdateParameters:
      example:
        isDone: true
      properties:
        isDone:
          example: true
          type: boolean
      required:
      - isDone
      title: DocumentDoneUpdateParameters
      type: object
    SegmentDeleteResponse:
      example:
        deleted: true
        id: 46530
      properties:
        id:
          description: A unique Segment identifier.
          example: 46530
          type: integer
        deleted:
          description: If the operation succeeded, then `true`. Otherwise, `false`.
          example: true
          type: boolean
      title: SegmentDeleteResponse
      type: object
    MemoryUpdateParameters:
      example:
        name: Automotive Memory
        id: 7246
      properties:
        id:
          description: A unique Memory identifier.
          example: 7246
          type: integer
        name:
          description: The Memory name.
          example: Automotive Memory
          type: string
      required:
      - id
      - name
      title: MemoryUpdateParameters
      type: object
    DocumentAssignmentResponse:
      example:
        id: 46530
      properties:
        id:
          description: A unique Document identifier.
          example: 46530
          type: integer
      title: DocumentAssignmentResponse
      type: object
    LanguagesResponse:
      example:
        source_to_target:
          en:
            da: true
            de: true
            fr: true
            "...": '...'
          "...": '...'
        code_to_name:
          aa: Afar
          ab: Abkhazian
          af: Afrikaans
          "...": '...'
      properties:
        source_to_target:
          description: A two-dimensional object in which the first key is an ISO 639-1
            language code indicating the source, and the second key is an ISO 639-1
            language code indicating the target.
          example:
            en:
              da: true
              de: true
              fr: true
              "...": '...'
            "...": '...'
          properties: {}
          type: object
        code_to_name:
          description: An object in which the key is an ISO 639-1 language code, and
            the value is the language name.
          example:
            aa: Afar
            ab: Abkhazian
            af: Afrikaans
            "...": '...'
          properties: {}
          type: object
      title: LanguagesResponse
      type: object
    DocumentAssignmentParameters:
      example:
        is_reviewer: false
        due_date: 2000-01-23T04:56:07.000+00:00
        is_translator: true
        id: 46530
        email: user@email.com
      properties:
        id:
          description: A unique Document identifier.
          example: 46530
          type: integer
        email:
          description: An email address.
          example: user@email.com
          type: string
        is_translator:
          description: If true, assign for translating. If false, then unassign.
          example: true
          type: boolean
        is_reviewer:
          description: If true, assign for reviewing. If false, then unassign.
          example: false
          type: boolean
        due_date:
          description: Due date for translation or review (set based on `is_translator`
            and `is_reviewer` flags).
          format: date-time
          type: string
      required:
      - email
      - id
      title: DocumentAssignmentParameters
      type: object
    MemorySyncDeleteResponse:
      example:
        id: 123
        num_updates: 107
      properties:
        id:
          description: A unique Memory identifier.
          example: 123
          type: integer
        num_updates:
          description: The number of updates to the Memory.
          example: 107
          type: integer
      title: MemorySyncDeleteResponse
      type: object
    SegmentCreateParameters:
      example:
        memory_id: 10641
        source: Code zur Fehleranalyse einschalten
        document_id: 1876
        target: Enable debugging code
      properties:
        memory_id:
          description: A unique Memory identifier.
          example: 10641
          type: integer
        document_id:
          description: A unique Document identifier.
          example: 1876
          type: integer
        source:
          description: The source string.
          example: Code zur Fehleranalyse einschalten
          type: string
        target:
          description: The target string.
          example: Enable debugging code
          type: string
      required:
      - source
      title: SegmentCreateParameters
      type: object
    CommentDeleteResponse:
      example:
        id: 12345
      properties:
        id:
          description: A unique Comment identifier.
          example: 12345
          type: integer
      title: CommentDeleteResponse
      type: object
    DocumentPretranslateParameters:
      example:
        mode: tm+mt
        attribute_to_creator: false
        case_sensitive: false
        id:
        - 123
        - 234
        auto_accept: false
      properties:
        id:
          description: A list of unique Document identifiers.
          example:
          - 123
          - 234
          items:
            type: integer
          type: array
        auto_accept:
          description: Optional parameter for auto-accepting 100% TM hits.
          example: false
          type: boolean
        case_sensitive:
          description: Optional for using case matching against TM hits..
          example: false
          type: boolean
        attribute_to_creator:
          description: Optional parameter for attributing translation authorship of
            exact matches to document creator.
          example: false
          type: boolean
        mode:
          description: |
            An optional parameter indicating how the document will be pretranslated.

            The accepted values are `tm`, or `tm+mt`. Default is `tm`.
          example: tm+mt
          type: string
      required:
      - id
      title: DocumentPretranslateParameters
      type: object
    DocumentPretranslateResponse:
      example:
        documents:
        - '{}'
        - '{}'
        id:
        - 123
        - 234
        is_pretranslating: true
      properties:
        id:
          description: A list of documents being pretranslated.
          example:
          - 123
          - 234
          items:
            type: integer
          type: array
        is_pretranslating:
          description: If the operation succeeded, then `true`. Otherwise, `false`.
          example: true
          type: boolean
        documents:
          description: Document pretranslation status.
          items:
            $ref: '#/object-definitions/DocumentPretranslating'
          type: array
      title: DocumentPretranslateResponse
      type: object
    JobCreateParameters:
      example:
        languagePairs:
        - '{}'
        - '{}'
        due: 2021-10-05T14:48:00.000Z
        fileIds:
        - 298
        - 299
        name: My new Job
      properties:
        name:
          description: A name for the Job.
          example: My new Job
          type: string
        due:
          description: An ISO string date.
          example: 2021-10-05T14:48:00.000Z
          type: string
        languagePairs:
          description: Language pairs is a set of one or more pairs that includes
            source language, source locale(optional), target language, target locale(optional),
            and memoryId.
          items:
            $ref: '#/object-definitions/LanguagePair'
          type: array
        fileIds:
          description: A list of file ids to upload to job creation.
          example:
          - 298
          - 299
          items:
            type: integer
          type: array
      required:
      - fileIds
      - languagePairs
      - name
      title: JobCreateParameters
      type: object
    JobUpdateParameters:
      example:
        dueDate: 0
        name: My new Job
      properties:
        name:
          description: A name for the Job.
          example: My new Job
          type: string
        dueDate:
          description: An ISO string date.
          type: integer
      title: JobUpdateParameters
      type: object
    ConnectorDeleteResponse:
      example:
        deleted: true
        id: 12345
      properties:
        id:
          description: A unique Connector identifier.
          example: 12345
          type: integer
        deleted:
          description: If the operation succeeded, then `true`. Otherwise, `false`.
          example: true
          type: boolean
      title: ConnectorDeleteResponse
      type: object
    connector:
      properties:
        name:
          description: Name of connector.
          type: string
        args:
          description: Connector parameters.
          properties: {}
          type: object
        schedule:
          description: Cron string
          example: 0 0 * * *
          type: string
      title: connector
      type: object
    MemoryInsertResponse:
      example:
        id: 123
        num_updates: 107
      properties:
        id:
          description: A unique Memory identifier.
          example: 123
          type: integer
        num_updates:
          description: The number of updates to the Memory.
          example: 107
          type: integer
      title: MemoryInsertResponse
      type: object
    ProjectCreateParameters:
      example:
        metadata:
          connectorType: github
          notes: example metadata
        memory_id: 1234
        job_id: 1234
        name: My new project
        due_date: 1489147692
      properties:
        name:
          description: A name for the Project.
          example: My new project
          type: string
        memory_id:
          description: The Memory to associate with this new Project.
          example: 1234
          type: integer
        job_id:
          description: |
            The Job to associate with this new Project. If a Job ID is not
            provided then a new Job will be created to contain the
            Project.
          example: 1234
          type: integer
        due_date:
          description: The due date. Measured in seconds since the Unix epoch.
          example: 1489147692
          type: integer
        metadata:
          description: A JSON object of key/value string pairs. Stores custom project
            information.
          example:
            connectorType: github
            notes: example metadata
          properties: {}
          type: object
      required:
      - memory_id
      - name
      title: ProjectCreateParameters
      type: object
    MemoryDeleteResponse:
      example:
        deleted: true
        id: 46530
      properties:
        id:
          description: A unique Memory identifier.
          example: 46530
          type: integer
        deleted:
          description: If the operation succeeded, then `true`. Otherwise, `false`.
          example: true
          type: boolean
      title: MemoryDeleteResponse
      type: object
    ProjectDeleteResponse:
      example:
        deleted: true
        id: 46530
      properties:
        id:
          description: A unique Project identifier.
          example: 46530
          type: integer
        deleted:
          description: If the operation succeeded, then `true`. Otherwise, `false`.
          example: true
          type: boolean
      title: ProjectDeleteResponse
      type: object
    ApiRoot:
      example:
        api_name: Lilt REST API v2
        api_root: /2
      properties:
        api_name:
          example: Lilt REST API v2
          type: string
        api_root:
          example: /2
          type: string
      title: ApiRoot
      type: object
    JobDeleteResponse:
      example:
        id: 241
      properties:
        id:
          description: A unique Project identifier.
          example: 241
          type: integer
      title: JobDeleteResponse
      type: object
    TranslateRegisterResponse:
      example:
        num_words: 88
        source_hash: 11476
      properties:
        source_hash:
          description: A unique source token required by the `prefix` parameter for
            translation requests.
          example: 11476
          type: integer
        num_words:
          description: The number of billed words in the segment.
          example: 88
          type: integer
      title: TranslateRegisterResponse
      type: object
  securitySchemes:
    BasicAuth:
      scheme: basic
      type: http
    ApiKeyAuth:
      in: query
      name: key
      type: apiKey
x-original-swagger-version: "2.0"

